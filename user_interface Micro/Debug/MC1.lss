
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a70  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a4  00800060  00002a70  00002ae4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002760  00000000  00000000  00002b88  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ecf  00000000  00000000  000052e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000061b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000062f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00006467  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000080b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009d48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a135  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a903  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 30       	cpi	r26, 0x04	; 4
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 36 15 	jmp	0x2a6c	; 0x2a6c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ba 14 	jmp	0x2974	; 0x2974 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a5 ef       	ldi	r26, 0xF5	; 245
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 d6 14 	jmp	0x29ac	; 0x29ac <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 c6 14 	jmp	0x298c	; 0x298c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 c6 14 	jmp	0x298c	; 0x298c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ba 14 	jmp	0x2974	; 0x2974 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	85 ef       	ldi	r24, 0xF5	; 245
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 d6 14 	jmp	0x29ac	; 0x29ac <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 c6 14 	jmp	0x298c	; 0x298c <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 c6 14 	jmp	0x298c	; 0x298c <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 c6 14 	jmp	0x298c	; 0x298c <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:

/*********************************************************
 *             MAIN FUNCTION
 **********************************************************/
int main()
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	6f 97       	sbiw	r28, 0x1f	; 31
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
	/**********************************************************
	 *              LIBRARIES CONFIGRATIONS
	 **********************************************************/
	UART_config UART_Config = {BIT_8,EVEN_PARITY,BIT_1,9600};
     b4a:	9e 01       	movw	r18, r28
     b4c:	2e 5e       	subi	r18, 0xEE	; 238
     b4e:	3f 4f       	sbci	r19, 0xFF	; 255
     b50:	3c 8f       	std	Y+28, r19	; 0x1c
     b52:	2b 8f       	std	Y+27, r18	; 0x1b
     b54:	8d ef       	ldi	r24, 0xFD	; 253
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	9e 8f       	std	Y+30, r25	; 0x1e
     b5a:	8d 8f       	std	Y+29, r24	; 0x1d
     b5c:	97 e0       	ldi	r25, 0x07	; 7
     b5e:	9f 8f       	std	Y+31, r25	; 0x1f
     b60:	ed 8d       	ldd	r30, Y+29	; 0x1d
     b62:	fe 8d       	ldd	r31, Y+30	; 0x1e
     b64:	00 80       	ld	r0, Z
     b66:	2d 8d       	ldd	r18, Y+29	; 0x1d
     b68:	3e 8d       	ldd	r19, Y+30	; 0x1e
     b6a:	2f 5f       	subi	r18, 0xFF	; 255
     b6c:	3f 4f       	sbci	r19, 0xFF	; 255
     b6e:	3e 8f       	std	Y+30, r19	; 0x1e
     b70:	2d 8f       	std	Y+29, r18	; 0x1d
     b72:	eb 8d       	ldd	r30, Y+27	; 0x1b
     b74:	fc 8d       	ldd	r31, Y+28	; 0x1c
     b76:	00 82       	st	Z, r0
     b78:	2b 8d       	ldd	r18, Y+27	; 0x1b
     b7a:	3c 8d       	ldd	r19, Y+28	; 0x1c
     b7c:	2f 5f       	subi	r18, 0xFF	; 255
     b7e:	3f 4f       	sbci	r19, 0xFF	; 255
     b80:	3c 8f       	std	Y+28, r19	; 0x1c
     b82:	2b 8f       	std	Y+27, r18	; 0x1b
     b84:	3f 8d       	ldd	r19, Y+31	; 0x1f
     b86:	31 50       	subi	r19, 0x01	; 1
     b88:	3f 8f       	std	Y+31, r19	; 0x1f
     b8a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b8c:	88 23       	and	r24, r24
     b8e:	41 f7       	brne	.-48     	; 0xb60 <main+0x2a>


	/*********************************
	 * INITIALIZING USED FUNCTIONS
	 ******************************/
	LCD_init();
     b90:	0e 94 27 0b 	call	0x164e	; 0x164e <LCD_init>

	UART_init(&UART_Config);
     b94:	ce 01       	movw	r24, r28
     b96:	42 96       	adiw	r24, 0x12	; 18
     b98:	0e 94 73 13 	call	0x26e6	; 0x26e6 <UART_init>

	PASSWORD_setPassword();
     b9c:	0e 94 41 12 	call	0x2482	; 0x2482 <PASSWORD_setPassword>
	while(1)
	{
		/******************************************
		 * DISPLAYING MAIN OPITIONS
		 *****************************************/
		LCD_clearScreen();
     ba0:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <LCD_clearScreen>
		LCD_moveCursor(0, 0);
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	60 e0       	ldi	r22, 0x00	; 0
     ba8:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_moveCursor>
		LCD_displayString("+ : OPen Door");
     bac:	80 e6       	ldi	r24, 0x60	; 96
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_displayString>
		LCD_moveCursor(1, 0);
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_moveCursor>
		LCD_displayString("- : Change Pass");
     bbc:	8e e6       	ldi	r24, 0x6E	; 110
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_displayString>
		temp = KEYPAD_getPressedKey(); // get the option from the user
     bc4:	0e 94 2f 0a 	call	0x145e	; 0x145e <KEYPAD_getPressedKey>
     bc8:	8f 87       	std	Y+15, r24	; 0x0f
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	90 e4       	ldi	r25, 0x40	; 64
     bce:	ac e1       	ldi	r26, 0x1C	; 28
     bd0:	b5 e4       	ldi	r27, 0x45	; 69
     bd2:	8b 87       	std	Y+11, r24	; 0x0b
     bd4:	9c 87       	std	Y+12, r25	; 0x0c
     bd6:	ad 87       	std	Y+13, r26	; 0x0d
     bd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bda:	6b 85       	ldd	r22, Y+11	; 0x0b
     bdc:	7c 85       	ldd	r23, Y+12	; 0x0c
     bde:	8d 85       	ldd	r24, Y+13	; 0x0d
     be0:	9e 85       	ldd	r25, Y+14	; 0x0e
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	4a e7       	ldi	r20, 0x7A	; 122
     be8:	53 e4       	ldi	r21, 0x43	; 67
     bea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bee:	dc 01       	movw	r26, r24
     bf0:	cb 01       	movw	r24, r22
     bf2:	8f 83       	std	Y+7, r24	; 0x07
     bf4:	98 87       	std	Y+8, r25	; 0x08
     bf6:	a9 87       	std	Y+9, r26	; 0x09
     bf8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bfa:	6f 81       	ldd	r22, Y+7	; 0x07
     bfc:	78 85       	ldd	r23, Y+8	; 0x08
     bfe:	89 85       	ldd	r24, Y+9	; 0x09
     c00:	9a 85       	ldd	r25, Y+10	; 0x0a
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	40 e8       	ldi	r20, 0x80	; 128
     c08:	5f e3       	ldi	r21, 0x3F	; 63
     c0a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     c0e:	88 23       	and	r24, r24
     c10:	2c f4       	brge	.+10     	; 0xc1c <main+0xe6>
		__ticks = 1;
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	9e 83       	std	Y+6, r25	; 0x06
     c18:	8d 83       	std	Y+5, r24	; 0x05
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <main+0x164>
	else if (__tmp > 65535)
     c1c:	6f 81       	ldd	r22, Y+7	; 0x07
     c1e:	78 85       	ldd	r23, Y+8	; 0x08
     c20:	89 85       	ldd	r24, Y+9	; 0x09
     c22:	9a 85       	ldd	r25, Y+10	; 0x0a
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	3f ef       	ldi	r19, 0xFF	; 255
     c28:	4f e7       	ldi	r20, 0x7F	; 127
     c2a:	57 e4       	ldi	r21, 0x47	; 71
     c2c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     c30:	18 16       	cp	r1, r24
     c32:	4c f5       	brge	.+82     	; 0xc86 <main+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c34:	6b 85       	ldd	r22, Y+11	; 0x0b
     c36:	7c 85       	ldd	r23, Y+12	; 0x0c
     c38:	8d 85       	ldd	r24, Y+13	; 0x0d
     c3a:	9e 85       	ldd	r25, Y+14	; 0x0e
     c3c:	20 e0       	ldi	r18, 0x00	; 0
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	40 e2       	ldi	r20, 0x20	; 32
     c42:	51 e4       	ldi	r21, 0x41	; 65
     c44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	bc 01       	movw	r22, r24
     c4e:	cd 01       	movw	r24, r26
     c50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c54:	dc 01       	movw	r26, r24
     c56:	cb 01       	movw	r24, r22
     c58:	9e 83       	std	Y+6, r25	; 0x06
     c5a:	8d 83       	std	Y+5, r24	; 0x05
     c5c:	0f c0       	rjmp	.+30     	; 0xc7c <main+0x146>
     c5e:	89 e1       	ldi	r24, 0x19	; 25
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	9c 83       	std	Y+4, r25	; 0x04
     c64:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c66:	8b 81       	ldd	r24, Y+3	; 0x03
     c68:	9c 81       	ldd	r25, Y+4	; 0x04
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	f1 f7       	brne	.-4      	; 0xc6a <main+0x134>
     c6e:	9c 83       	std	Y+4, r25	; 0x04
     c70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c72:	8d 81       	ldd	r24, Y+5	; 0x05
     c74:	9e 81       	ldd	r25, Y+6	; 0x06
     c76:	01 97       	sbiw	r24, 0x01	; 1
     c78:	9e 83       	std	Y+6, r25	; 0x06
     c7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c7c:	8d 81       	ldd	r24, Y+5	; 0x05
     c7e:	9e 81       	ldd	r25, Y+6	; 0x06
     c80:	00 97       	sbiw	r24, 0x00	; 0
     c82:	69 f7       	brne	.-38     	; 0xc5e <main+0x128>
     c84:	14 c0       	rjmp	.+40     	; 0xcae <main+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c86:	6f 81       	ldd	r22, Y+7	; 0x07
     c88:	78 85       	ldd	r23, Y+8	; 0x08
     c8a:	89 85       	ldd	r24, Y+9	; 0x09
     c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c92:	dc 01       	movw	r26, r24
     c94:	cb 01       	movw	r24, r22
     c96:	9e 83       	std	Y+6, r25	; 0x06
     c98:	8d 83       	std	Y+5, r24	; 0x05
     c9a:	8d 81       	ldd	r24, Y+5	; 0x05
     c9c:	9e 81       	ldd	r25, Y+6	; 0x06
     c9e:	9a 83       	std	Y+2, r25	; 0x02
     ca0:	89 83       	std	Y+1, r24	; 0x01
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	9a 81       	ldd	r25, Y+2	; 0x02
     ca6:	01 97       	sbiw	r24, 0x01	; 1
     ca8:	f1 f7       	brne	.-4      	; 0xca6 <main+0x170>
     caa:	9a 83       	std	Y+2, r25	; 0x02
     cac:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2500);

		UART_sendByte(temp); //sending the operation to the controlling MC
     cae:	8f 85       	ldd	r24, Y+15	; 0x0f
     cb0:	0e 94 06 14 	call	0x280c	; 0x280c <UART_sendByte>

		switch(temp)
     cb4:	8f 85       	ldd	r24, Y+15	; 0x0f
     cb6:	e8 2f       	mov	r30, r24
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	fa 8f       	std	Y+26, r31	; 0x1a
     cbc:	e9 8f       	std	Y+25, r30	; 0x19
     cbe:	29 8d       	ldd	r18, Y+25	; 0x19
     cc0:	3a 8d       	ldd	r19, Y+26	; 0x1a
     cc2:	2b 32       	cpi	r18, 0x2B	; 43
     cc4:	31 05       	cpc	r19, r1
     cc6:	a1 f1       	breq	.+104    	; 0xd30 <main+0x1fa>
     cc8:	89 8d       	ldd	r24, Y+25	; 0x19
     cca:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ccc:	8d 32       	cpi	r24, 0x2D	; 45
     cce:	91 05       	cpc	r25, r1
     cd0:	09 f0       	breq	.+2      	; 0xcd4 <main+0x19e>
     cd2:	66 cf       	rjmp	.-308    	; 0xba0 <main+0x6a>
		case '-':
			do{
				/*
				 * checking the old password
				 */
				pass = PASSWORD_getPassword();
     cd4:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <PASSWORD_getPassword>
     cd8:	99 8b       	std	Y+17, r25	; 0x11
     cda:	88 8b       	std	Y+16, r24	; 0x10
				UART_sendByte((uint8)(pass));
     cdc:	88 89       	ldd	r24, Y+16	; 0x10
     cde:	0e 94 06 14 	call	0x280c	; 0x280c <UART_sendByte>
				UART_sendByte((uint8)(pass>>8));
     ce2:	88 89       	ldd	r24, Y+16	; 0x10
     ce4:	99 89       	ldd	r25, Y+17	; 0x11
     ce6:	89 2f       	mov	r24, r25
     ce8:	99 27       	eor	r25, r25
     cea:	0e 94 06 14 	call	0x280c	; 0x280c <UART_sendByte>
				temp = UART_recieveByte(); // if he entered a wrong password
     cee:	0e 94 1d 14 	call	0x283a	; 0x283a <UART_recieveByte>
     cf2:	8f 87       	std	Y+15, r24	; 0x0f
				if(temp == WRONG)
     cf4:	8f 85       	ldd	r24, Y+15	; 0x0f
     cf6:	80 34       	cpi	r24, 0x40	; 64
     cf8:	91 f4       	brne	.+36     	; 0xd1e <main+0x1e8>
				{
					UART_sendByte(WRONG);
     cfa:	80 e4       	ldi	r24, 0x40	; 64
     cfc:	0e 94 06 14 	call	0x280c	; 0x280c <UART_sendByte>
					LCD_clearScreen();
     d00:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <LCD_clearScreen>
					LCD_moveCursor(0, 0);
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	60 e0       	ldi	r22, 0x00	; 0
     d08:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_moveCursor>
					LCD_displayString("STOP a THIEF....");
     d0c:	8e e7       	ldi	r24, 0x7E	; 126
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_displayString>
					while(UART_recieveByte()!=DONE){}
     d14:	0e 94 1d 14 	call	0x283a	; 0x283a <UART_recieveByte>
     d18:	80 32       	cpi	r24, 0x20	; 32
     d1a:	e1 f7       	brne	.-8      	; 0xd14 <main+0x1de>
     d1c:	03 c0       	rjmp	.+6      	; 0xd24 <main+0x1ee>
				}
				else
					UART_sendByte(RIGHT);
     d1e:	80 e3       	ldi	r24, 0x30	; 48
     d20:	0e 94 06 14 	call	0x280c	; 0x280c <UART_sendByte>
			}while(temp==WRONG);
     d24:	8f 85       	ldd	r24, Y+15	; 0x0f
     d26:	80 34       	cpi	r24, 0x40	; 64
     d28:	a9 f2       	breq	.-86     	; 0xcd4 <main+0x19e>

			/*
			 * when he enter the write old password he will managed to set a new one
			 */

			PASSWORD_setPassword();
     d2a:	0e 94 41 12 	call	0x2482	; 0x2482 <PASSWORD_setPassword>
     d2e:	38 cf       	rjmp	.-400    	; 0xba0 <main+0x6a>
			 **********************************************************/
			do{
				/*
				 * checking the old password
				 */
				pass = PASSWORD_getPassword();
     d30:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <PASSWORD_getPassword>
     d34:	99 8b       	std	Y+17, r25	; 0x11
     d36:	88 8b       	std	Y+16, r24	; 0x10
				UART_sendByte((uint8)(pass));
     d38:	88 89       	ldd	r24, Y+16	; 0x10
     d3a:	0e 94 06 14 	call	0x280c	; 0x280c <UART_sendByte>
				UART_sendByte((uint8)(pass>>8));
     d3e:	88 89       	ldd	r24, Y+16	; 0x10
     d40:	99 89       	ldd	r25, Y+17	; 0x11
     d42:	89 2f       	mov	r24, r25
     d44:	99 27       	eor	r25, r25
     d46:	0e 94 06 14 	call	0x280c	; 0x280c <UART_sendByte>

				temp = UART_recieveByte();
     d4a:	0e 94 1d 14 	call	0x283a	; 0x283a <UART_recieveByte>
     d4e:	8f 87       	std	Y+15, r24	; 0x0f
				if(temp == WRONG)
     d50:	8f 85       	ldd	r24, Y+15	; 0x0f
     d52:	80 34       	cpi	r24, 0x40	; 64
     d54:	91 f4       	brne	.+36     	; 0xd7a <main+0x244>
				{
					UART_sendByte(WRONG);
     d56:	80 e4       	ldi	r24, 0x40	; 64
     d58:	0e 94 06 14 	call	0x280c	; 0x280c <UART_sendByte>
					LCD_clearScreen();
     d5c:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <LCD_clearScreen>
					LCD_moveCursor(0, 0);
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	60 e0       	ldi	r22, 0x00	; 0
     d64:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_moveCursor>
					LCD_displayString("STOP a THIEF....");
     d68:	8e e7       	ldi	r24, 0x7E	; 126
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_displayString>
					while(UART_recieveByte()!=DONE){}
     d70:	0e 94 1d 14 	call	0x283a	; 0x283a <UART_recieveByte>
     d74:	80 32       	cpi	r24, 0x20	; 32
     d76:	e1 f7       	brne	.-8      	; 0xd70 <main+0x23a>
     d78:	03 c0       	rjmp	.+6      	; 0xd80 <main+0x24a>
				}
				else
					UART_sendByte(RIGHT);
     d7a:	80 e3       	ldi	r24, 0x30	; 48
     d7c:	0e 94 06 14 	call	0x280c	; 0x280c <UART_sendByte>
			}while(temp==WRONG);
     d80:	8f 85       	ldd	r24, Y+15	; 0x0f
     d82:	80 34       	cpi	r24, 0x40	; 64
     d84:	a9 f2       	breq	.-86     	; 0xd30 <main+0x1fa>

			/*
			 * when he enter the write old password he will managed to open the door
			 */

			UART_sendByte(OPEN);
     d86:	80 e5       	ldi	r24, 0x50	; 80
     d88:	0e 94 06 14 	call	0x280c	; 0x280c <UART_sendByte>

			LCD_clearScreen();
     d8c:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <LCD_clearScreen>
			LCD_moveCursor(0, 0);
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_moveCursor>
			LCD_displayString("OPENNING..."); // displaying the state of the door
     d98:	8f e8       	ldi	r24, 0x8F	; 143
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_displayString>

			while(UART_recieveByte()!=OPENED){}
     da0:	0e 94 1d 14 	call	0x283a	; 0x283a <UART_recieveByte>
     da4:	80 36       	cpi	r24, 0x60	; 96
     da6:	e1 f7       	brne	.-8      	; 0xda0 <main+0x26a>

			LCD_clearScreen();
     da8:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <LCD_clearScreen>
			LCD_moveCursor(0, 0);
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_moveCursor>
			LCD_displayString("DOOR OPENED --)");
     db4:	8b e9       	ldi	r24, 0x9B	; 155
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_displayString>

			while(UART_recieveByte()!=CLOSE){}
     dbc:	0e 94 1d 14 	call	0x283a	; 0x283a <UART_recieveByte>
     dc0:	80 37       	cpi	r24, 0x70	; 112
     dc2:	e1 f7       	brne	.-8      	; 0xdbc <main+0x286>

			LCD_clearScreen();
     dc4:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <LCD_clearScreen>
			LCD_moveCursor(0, 0);
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_moveCursor>
			LCD_displayString("CLOSING...");
     dd0:	8b ea       	ldi	r24, 0xAB	; 171
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_displayString>


			while(UART_recieveByte()!=DONE){}
     dd8:	0e 94 1d 14 	call	0x283a	; 0x283a <UART_recieveByte>
     ddc:	80 32       	cpi	r24, 0x20	; 32
     dde:	e1 f7       	brne	.-8      	; 0xdd8 <main+0x2a2>
     de0:	df ce       	rjmp	.-578    	; 0xba0 <main+0x6a>

00000de2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	00 d0       	rcall	.+0      	; 0xde8 <GPIO_setupPinDirection+0x6>
     de8:	00 d0       	rcall	.+0      	; 0xdea <GPIO_setupPinDirection+0x8>
     dea:	0f 92       	push	r0
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	89 83       	std	Y+1, r24	; 0x01
     df2:	6a 83       	std	Y+2, r22	; 0x02
     df4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	88 30       	cpi	r24, 0x08	; 8
     dfa:	08 f0       	brcs	.+2      	; 0xdfe <GPIO_setupPinDirection+0x1c>
     dfc:	d5 c0       	rjmp	.+426    	; 0xfa8 <GPIO_setupPinDirection+0x1c6>
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	84 30       	cpi	r24, 0x04	; 4
     e02:	08 f0       	brcs	.+2      	; 0xe06 <GPIO_setupPinDirection+0x24>
     e04:	d1 c0       	rjmp	.+418    	; 0xfa8 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	3d 83       	std	Y+5, r19	; 0x05
     e0e:	2c 83       	std	Y+4, r18	; 0x04
     e10:	8c 81       	ldd	r24, Y+4	; 0x04
     e12:	9d 81       	ldd	r25, Y+5	; 0x05
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	91 05       	cpc	r25, r1
     e18:	09 f4       	brne	.+2      	; 0xe1c <GPIO_setupPinDirection+0x3a>
     e1a:	43 c0       	rjmp	.+134    	; 0xea2 <GPIO_setupPinDirection+0xc0>
     e1c:	2c 81       	ldd	r18, Y+4	; 0x04
     e1e:	3d 81       	ldd	r19, Y+5	; 0x05
     e20:	22 30       	cpi	r18, 0x02	; 2
     e22:	31 05       	cpc	r19, r1
     e24:	2c f4       	brge	.+10     	; 0xe30 <GPIO_setupPinDirection+0x4e>
     e26:	8c 81       	ldd	r24, Y+4	; 0x04
     e28:	9d 81       	ldd	r25, Y+5	; 0x05
     e2a:	00 97       	sbiw	r24, 0x00	; 0
     e2c:	71 f0       	breq	.+28     	; 0xe4a <GPIO_setupPinDirection+0x68>
     e2e:	bc c0       	rjmp	.+376    	; 0xfa8 <GPIO_setupPinDirection+0x1c6>
     e30:	2c 81       	ldd	r18, Y+4	; 0x04
     e32:	3d 81       	ldd	r19, Y+5	; 0x05
     e34:	22 30       	cpi	r18, 0x02	; 2
     e36:	31 05       	cpc	r19, r1
     e38:	09 f4       	brne	.+2      	; 0xe3c <GPIO_setupPinDirection+0x5a>
     e3a:	5f c0       	rjmp	.+190    	; 0xefa <GPIO_setupPinDirection+0x118>
     e3c:	8c 81       	ldd	r24, Y+4	; 0x04
     e3e:	9d 81       	ldd	r25, Y+5	; 0x05
     e40:	83 30       	cpi	r24, 0x03	; 3
     e42:	91 05       	cpc	r25, r1
     e44:	09 f4       	brne	.+2      	; 0xe48 <GPIO_setupPinDirection+0x66>
     e46:	85 c0       	rjmp	.+266    	; 0xf52 <GPIO_setupPinDirection+0x170>
     e48:	af c0       	rjmp	.+350    	; 0xfa8 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	a1 f4       	brne	.+40     	; 0xe78 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     e50:	aa e3       	ldi	r26, 0x3A	; 58
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	ea e3       	ldi	r30, 0x3A	; 58
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	48 2f       	mov	r20, r24
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 2e       	mov	r0, r18
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <GPIO_setupPinDirection+0x8c>
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <GPIO_setupPinDirection+0x88>
     e72:	84 2b       	or	r24, r20
     e74:	8c 93       	st	X, r24
     e76:	98 c0       	rjmp	.+304    	; 0xfa8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     e78:	aa e3       	ldi	r26, 0x3A	; 58
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	ea e3       	ldi	r30, 0x3A	; 58
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	48 2f       	mov	r20, r24
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	02 2e       	mov	r0, r18
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <GPIO_setupPinDirection+0xb4>
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	0a 94       	dec	r0
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <GPIO_setupPinDirection+0xb0>
     e9a:	80 95       	com	r24
     e9c:	84 23       	and	r24, r20
     e9e:	8c 93       	st	X, r24
     ea0:	83 c0       	rjmp	.+262    	; 0xfa8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	a1 f4       	brne	.+40     	; 0xed0 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     ea8:	a7 e3       	ldi	r26, 0x37	; 55
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e7 e3       	ldi	r30, 0x37	; 55
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 2e       	mov	r0, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <GPIO_setupPinDirection+0xe4>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <GPIO_setupPinDirection+0xe0>
     eca:	84 2b       	or	r24, r20
     ecc:	8c 93       	st	X, r24
     ece:	6c c0       	rjmp	.+216    	; 0xfa8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     ed0:	a7 e3       	ldi	r26, 0x37	; 55
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e7 e3       	ldi	r30, 0x37	; 55
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	48 2f       	mov	r20, r24
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	02 2e       	mov	r0, r18
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <GPIO_setupPinDirection+0x10c>
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	0a 94       	dec	r0
     ef0:	e2 f7       	brpl	.-8      	; 0xeea <GPIO_setupPinDirection+0x108>
     ef2:	80 95       	com	r24
     ef4:	84 23       	and	r24, r20
     ef6:	8c 93       	st	X, r24
     ef8:	57 c0       	rjmp	.+174    	; 0xfa8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	a1 f4       	brne	.+40     	; 0xf28 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     f00:	a4 e3       	ldi	r26, 0x34	; 52
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e4 e3       	ldi	r30, 0x34	; 52
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <GPIO_setupPinDirection+0x13c>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <GPIO_setupPinDirection+0x138>
     f22:	84 2b       	or	r24, r20
     f24:	8c 93       	st	X, r24
     f26:	40 c0       	rjmp	.+128    	; 0xfa8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     f28:	a4 e3       	ldi	r26, 0x34	; 52
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e4 e3       	ldi	r30, 0x34	; 52
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	02 2e       	mov	r0, r18
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <GPIO_setupPinDirection+0x164>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	0a 94       	dec	r0
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <GPIO_setupPinDirection+0x160>
     f4a:	80 95       	com	r24
     f4c:	84 23       	and	r24, r20
     f4e:	8c 93       	st	X, r24
     f50:	2b c0       	rjmp	.+86     	; 0xfa8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	a1 f4       	brne	.+40     	; 0xf80 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     f58:	a1 e3       	ldi	r26, 0x31	; 49
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e1 e3       	ldi	r30, 0x31	; 49
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	48 2f       	mov	r20, r24
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	02 2e       	mov	r0, r18
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <GPIO_setupPinDirection+0x194>
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	0a 94       	dec	r0
     f78:	e2 f7       	brpl	.-8      	; 0xf72 <GPIO_setupPinDirection+0x190>
     f7a:	84 2b       	or	r24, r20
     f7c:	8c 93       	st	X, r24
     f7e:	14 c0       	rjmp	.+40     	; 0xfa8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     f80:	a1 e3       	ldi	r26, 0x31	; 49
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e1 e3       	ldi	r30, 0x31	; 49
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	48 2f       	mov	r20, r24
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	02 2e       	mov	r0, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <GPIO_setupPinDirection+0x1bc>
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	0a 94       	dec	r0
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <GPIO_setupPinDirection+0x1b8>
     fa2:	80 95       	com	r24
     fa4:	84 23       	and	r24, r20
     fa6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	cf 91       	pop	r28
     fb4:	df 91       	pop	r29
     fb6:	08 95       	ret

00000fb8 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     fb8:	df 93       	push	r29
     fba:	cf 93       	push	r28
     fbc:	00 d0       	rcall	.+0      	; 0xfbe <GPIO_writePin+0x6>
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <GPIO_writePin+0x8>
     fc0:	0f 92       	push	r0
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	89 83       	std	Y+1, r24	; 0x01
     fc8:	6a 83       	std	Y+2, r22	; 0x02
     fca:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	88 30       	cpi	r24, 0x08	; 8
     fd0:	08 f0       	brcs	.+2      	; 0xfd4 <GPIO_writePin+0x1c>
     fd2:	d5 c0       	rjmp	.+426    	; 0x117e <GPIO_writePin+0x1c6>
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	84 30       	cpi	r24, 0x04	; 4
     fd8:	08 f0       	brcs	.+2      	; 0xfdc <GPIO_writePin+0x24>
     fda:	d1 c0       	rjmp	.+418    	; 0x117e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	3d 83       	std	Y+5, r19	; 0x05
     fe4:	2c 83       	std	Y+4, r18	; 0x04
     fe6:	8c 81       	ldd	r24, Y+4	; 0x04
     fe8:	9d 81       	ldd	r25, Y+5	; 0x05
     fea:	81 30       	cpi	r24, 0x01	; 1
     fec:	91 05       	cpc	r25, r1
     fee:	09 f4       	brne	.+2      	; 0xff2 <GPIO_writePin+0x3a>
     ff0:	43 c0       	rjmp	.+134    	; 0x1078 <GPIO_writePin+0xc0>
     ff2:	2c 81       	ldd	r18, Y+4	; 0x04
     ff4:	3d 81       	ldd	r19, Y+5	; 0x05
     ff6:	22 30       	cpi	r18, 0x02	; 2
     ff8:	31 05       	cpc	r19, r1
     ffa:	2c f4       	brge	.+10     	; 0x1006 <GPIO_writePin+0x4e>
     ffc:	8c 81       	ldd	r24, Y+4	; 0x04
     ffe:	9d 81       	ldd	r25, Y+5	; 0x05
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	71 f0       	breq	.+28     	; 0x1020 <GPIO_writePin+0x68>
    1004:	bc c0       	rjmp	.+376    	; 0x117e <GPIO_writePin+0x1c6>
    1006:	2c 81       	ldd	r18, Y+4	; 0x04
    1008:	3d 81       	ldd	r19, Y+5	; 0x05
    100a:	22 30       	cpi	r18, 0x02	; 2
    100c:	31 05       	cpc	r19, r1
    100e:	09 f4       	brne	.+2      	; 0x1012 <GPIO_writePin+0x5a>
    1010:	5f c0       	rjmp	.+190    	; 0x10d0 <GPIO_writePin+0x118>
    1012:	8c 81       	ldd	r24, Y+4	; 0x04
    1014:	9d 81       	ldd	r25, Y+5	; 0x05
    1016:	83 30       	cpi	r24, 0x03	; 3
    1018:	91 05       	cpc	r25, r1
    101a:	09 f4       	brne	.+2      	; 0x101e <GPIO_writePin+0x66>
    101c:	85 c0       	rjmp	.+266    	; 0x1128 <GPIO_writePin+0x170>
    101e:	af c0       	rjmp	.+350    	; 0x117e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	81 30       	cpi	r24, 0x01	; 1
    1024:	a1 f4       	brne	.+40     	; 0x104e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1026:	ab e3       	ldi	r26, 0x3B	; 59
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	eb e3       	ldi	r30, 0x3B	; 59
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <GPIO_writePin+0x8c>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <GPIO_writePin+0x88>
    1048:	84 2b       	or	r24, r20
    104a:	8c 93       	st	X, r24
    104c:	98 c0       	rjmp	.+304    	; 0x117e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    104e:	ab e3       	ldi	r26, 0x3B	; 59
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	eb e3       	ldi	r30, 0x3B	; 59
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <GPIO_writePin+0xb4>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <GPIO_writePin+0xb0>
    1070:	80 95       	com	r24
    1072:	84 23       	and	r24, r20
    1074:	8c 93       	st	X, r24
    1076:	83 c0       	rjmp	.+262    	; 0x117e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	81 30       	cpi	r24, 0x01	; 1
    107c:	a1 f4       	brne	.+40     	; 0x10a6 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    107e:	a8 e3       	ldi	r26, 0x38	; 56
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e8 e3       	ldi	r30, 0x38	; 56
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	48 2f       	mov	r20, r24
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	02 2e       	mov	r0, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <GPIO_writePin+0xe4>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	0a 94       	dec	r0
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <GPIO_writePin+0xe0>
    10a0:	84 2b       	or	r24, r20
    10a2:	8c 93       	st	X, r24
    10a4:	6c c0       	rjmp	.+216    	; 0x117e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    10a6:	a8 e3       	ldi	r26, 0x38	; 56
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e8 e3       	ldi	r30, 0x38	; 56
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	48 2f       	mov	r20, r24
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 2e       	mov	r0, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <GPIO_writePin+0x10c>
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	0a 94       	dec	r0
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <GPIO_writePin+0x108>
    10c8:	80 95       	com	r24
    10ca:	84 23       	and	r24, r20
    10cc:	8c 93       	st	X, r24
    10ce:	57 c0       	rjmp	.+174    	; 0x117e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	81 30       	cpi	r24, 0x01	; 1
    10d4:	a1 f4       	brne	.+40     	; 0x10fe <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    10d6:	a5 e3       	ldi	r26, 0x35	; 53
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e5 e3       	ldi	r30, 0x35	; 53
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	48 2f       	mov	r20, r24
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 2e       	mov	r0, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <GPIO_writePin+0x13c>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	0a 94       	dec	r0
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <GPIO_writePin+0x138>
    10f8:	84 2b       	or	r24, r20
    10fa:	8c 93       	st	X, r24
    10fc:	40 c0       	rjmp	.+128    	; 0x117e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    10fe:	a5 e3       	ldi	r26, 0x35	; 53
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e5 e3       	ldi	r30, 0x35	; 53
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	48 2f       	mov	r20, r24
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 2e       	mov	r0, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <GPIO_writePin+0x164>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	0a 94       	dec	r0
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <GPIO_writePin+0x160>
    1120:	80 95       	com	r24
    1122:	84 23       	and	r24, r20
    1124:	8c 93       	st	X, r24
    1126:	2b c0       	rjmp	.+86     	; 0x117e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	81 30       	cpi	r24, 0x01	; 1
    112c:	a1 f4       	brne	.+40     	; 0x1156 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    112e:	a2 e3       	ldi	r26, 0x32	; 50
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e2 e3       	ldi	r30, 0x32	; 50
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	48 2f       	mov	r20, r24
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 2e       	mov	r0, r18
    1146:	02 c0       	rjmp	.+4      	; 0x114c <GPIO_writePin+0x194>
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	0a 94       	dec	r0
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <GPIO_writePin+0x190>
    1150:	84 2b       	or	r24, r20
    1152:	8c 93       	st	X, r24
    1154:	14 c0       	rjmp	.+40     	; 0x117e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1156:	a2 e3       	ldi	r26, 0x32	; 50
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e2 e3       	ldi	r30, 0x32	; 50
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	48 2f       	mov	r20, r24
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	02 2e       	mov	r0, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <GPIO_writePin+0x1bc>
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	0a 94       	dec	r0
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <GPIO_writePin+0x1b8>
    1178:	80 95       	com	r24
    117a:	84 23       	and	r24, r20
    117c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    118e:	df 93       	push	r29
    1190:	cf 93       	push	r28
    1192:	00 d0       	rcall	.+0      	; 0x1194 <GPIO_readPin+0x6>
    1194:	00 d0       	rcall	.+0      	; 0x1196 <GPIO_readPin+0x8>
    1196:	0f 92       	push	r0
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	8a 83       	std	Y+2, r24	; 0x02
    119e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    11a0:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	88 30       	cpi	r24, 0x08	; 8
    11a6:	08 f0       	brcs	.+2      	; 0x11aa <GPIO_readPin+0x1c>
    11a8:	84 c0       	rjmp	.+264    	; 0x12b2 <GPIO_readPin+0x124>
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	84 30       	cpi	r24, 0x04	; 4
    11ae:	08 f0       	brcs	.+2      	; 0x11b2 <GPIO_readPin+0x24>
    11b0:	80 c0       	rjmp	.+256    	; 0x12b2 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	3d 83       	std	Y+5, r19	; 0x05
    11ba:	2c 83       	std	Y+4, r18	; 0x04
    11bc:	4c 81       	ldd	r20, Y+4	; 0x04
    11be:	5d 81       	ldd	r21, Y+5	; 0x05
    11c0:	41 30       	cpi	r20, 0x01	; 1
    11c2:	51 05       	cpc	r21, r1
    11c4:	79 f1       	breq	.+94     	; 0x1224 <GPIO_readPin+0x96>
    11c6:	8c 81       	ldd	r24, Y+4	; 0x04
    11c8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ca:	82 30       	cpi	r24, 0x02	; 2
    11cc:	91 05       	cpc	r25, r1
    11ce:	34 f4       	brge	.+12     	; 0x11dc <GPIO_readPin+0x4e>
    11d0:	2c 81       	ldd	r18, Y+4	; 0x04
    11d2:	3d 81       	ldd	r19, Y+5	; 0x05
    11d4:	21 15       	cp	r18, r1
    11d6:	31 05       	cpc	r19, r1
    11d8:	69 f0       	breq	.+26     	; 0x11f4 <GPIO_readPin+0x66>
    11da:	6b c0       	rjmp	.+214    	; 0x12b2 <GPIO_readPin+0x124>
    11dc:	4c 81       	ldd	r20, Y+4	; 0x04
    11de:	5d 81       	ldd	r21, Y+5	; 0x05
    11e0:	42 30       	cpi	r20, 0x02	; 2
    11e2:	51 05       	cpc	r21, r1
    11e4:	b9 f1       	breq	.+110    	; 0x1254 <GPIO_readPin+0xc6>
    11e6:	8c 81       	ldd	r24, Y+4	; 0x04
    11e8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ea:	83 30       	cpi	r24, 0x03	; 3
    11ec:	91 05       	cpc	r25, r1
    11ee:	09 f4       	brne	.+2      	; 0x11f2 <GPIO_readPin+0x64>
    11f0:	49 c0       	rjmp	.+146    	; 0x1284 <GPIO_readPin+0xf6>
    11f2:	5f c0       	rjmp	.+190    	; 0x12b2 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    11f4:	e9 e3       	ldi	r30, 0x39	; 57
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	88 2f       	mov	r24, r24
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	a9 01       	movw	r20, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <GPIO_readPin+0x7e>
    1208:	55 95       	asr	r21
    120a:	47 95       	ror	r20
    120c:	8a 95       	dec	r24
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <GPIO_readPin+0x7a>
    1210:	ca 01       	movw	r24, r20
    1212:	81 70       	andi	r24, 0x01	; 1
    1214:	90 70       	andi	r25, 0x00	; 0
    1216:	88 23       	and	r24, r24
    1218:	19 f0       	breq	.+6      	; 0x1220 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	89 83       	std	Y+1, r24	; 0x01
    121e:	49 c0       	rjmp	.+146    	; 0x12b2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1220:	19 82       	std	Y+1, r1	; 0x01
    1222:	47 c0       	rjmp	.+142    	; 0x12b2 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1224:	e6 e3       	ldi	r30, 0x36	; 54
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	88 2f       	mov	r24, r24
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	a9 01       	movw	r20, r18
    1236:	02 c0       	rjmp	.+4      	; 0x123c <GPIO_readPin+0xae>
    1238:	55 95       	asr	r21
    123a:	47 95       	ror	r20
    123c:	8a 95       	dec	r24
    123e:	e2 f7       	brpl	.-8      	; 0x1238 <GPIO_readPin+0xaa>
    1240:	ca 01       	movw	r24, r20
    1242:	81 70       	andi	r24, 0x01	; 1
    1244:	90 70       	andi	r25, 0x00	; 0
    1246:	88 23       	and	r24, r24
    1248:	19 f0       	breq	.+6      	; 0x1250 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	89 83       	std	Y+1, r24	; 0x01
    124e:	31 c0       	rjmp	.+98     	; 0x12b2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1250:	19 82       	std	Y+1, r1	; 0x01
    1252:	2f c0       	rjmp	.+94     	; 0x12b2 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1254:	e3 e3       	ldi	r30, 0x33	; 51
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	88 2f       	mov	r24, r24
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	a9 01       	movw	r20, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <GPIO_readPin+0xde>
    1268:	55 95       	asr	r21
    126a:	47 95       	ror	r20
    126c:	8a 95       	dec	r24
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <GPIO_readPin+0xda>
    1270:	ca 01       	movw	r24, r20
    1272:	81 70       	andi	r24, 0x01	; 1
    1274:	90 70       	andi	r25, 0x00	; 0
    1276:	88 23       	and	r24, r24
    1278:	19 f0       	breq	.+6      	; 0x1280 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	89 83       	std	Y+1, r24	; 0x01
    127e:	19 c0       	rjmp	.+50     	; 0x12b2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1280:	19 82       	std	Y+1, r1	; 0x01
    1282:	17 c0       	rjmp	.+46     	; 0x12b2 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1284:	e0 e3       	ldi	r30, 0x30	; 48
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	88 2f       	mov	r24, r24
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	a9 01       	movw	r20, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <GPIO_readPin+0x10e>
    1298:	55 95       	asr	r21
    129a:	47 95       	ror	r20
    129c:	8a 95       	dec	r24
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <GPIO_readPin+0x10a>
    12a0:	ca 01       	movw	r24, r20
    12a2:	81 70       	andi	r24, 0x01	; 1
    12a4:	90 70       	andi	r25, 0x00	; 0
    12a6:	88 23       	and	r24, r24
    12a8:	19 f0       	breq	.+6      	; 0x12b0 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	89 83       	std	Y+1, r24	; 0x01
    12ae:	01 c0       	rjmp	.+2      	; 0x12b2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12b0:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	08 95       	ret

000012c4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <GPIO_setupPortDirection+0x6>
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <GPIO_setupPortDirection+0x8>
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	89 83       	std	Y+1, r24	; 0x01
    12d2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	84 30       	cpi	r24, 0x04	; 4
    12d8:	90 f5       	brcc	.+100    	; 0x133e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	3c 83       	std	Y+4, r19	; 0x04
    12e2:	2b 83       	std	Y+3, r18	; 0x03
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	9c 81       	ldd	r25, Y+4	; 0x04
    12e8:	81 30       	cpi	r24, 0x01	; 1
    12ea:	91 05       	cpc	r25, r1
    12ec:	d1 f0       	breq	.+52     	; 0x1322 <GPIO_setupPortDirection+0x5e>
    12ee:	2b 81       	ldd	r18, Y+3	; 0x03
    12f0:	3c 81       	ldd	r19, Y+4	; 0x04
    12f2:	22 30       	cpi	r18, 0x02	; 2
    12f4:	31 05       	cpc	r19, r1
    12f6:	2c f4       	brge	.+10     	; 0x1302 <GPIO_setupPortDirection+0x3e>
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	9c 81       	ldd	r25, Y+4	; 0x04
    12fc:	00 97       	sbiw	r24, 0x00	; 0
    12fe:	61 f0       	breq	.+24     	; 0x1318 <GPIO_setupPortDirection+0x54>
    1300:	1e c0       	rjmp	.+60     	; 0x133e <GPIO_setupPortDirection+0x7a>
    1302:	2b 81       	ldd	r18, Y+3	; 0x03
    1304:	3c 81       	ldd	r19, Y+4	; 0x04
    1306:	22 30       	cpi	r18, 0x02	; 2
    1308:	31 05       	cpc	r19, r1
    130a:	81 f0       	breq	.+32     	; 0x132c <GPIO_setupPortDirection+0x68>
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	9c 81       	ldd	r25, Y+4	; 0x04
    1310:	83 30       	cpi	r24, 0x03	; 3
    1312:	91 05       	cpc	r25, r1
    1314:	81 f0       	breq	.+32     	; 0x1336 <GPIO_setupPortDirection+0x72>
    1316:	13 c0       	rjmp	.+38     	; 0x133e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1318:	ea e3       	ldi	r30, 0x3A	; 58
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	80 83       	st	Z, r24
    1320:	0e c0       	rjmp	.+28     	; 0x133e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1322:	e7 e3       	ldi	r30, 0x37	; 55
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	80 83       	st	Z, r24
    132a:	09 c0       	rjmp	.+18     	; 0x133e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    132c:	e4 e3       	ldi	r30, 0x34	; 52
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	80 83       	st	Z, r24
    1334:	04 c0       	rjmp	.+8      	; 0x133e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1336:	e1 e3       	ldi	r30, 0x31	; 49
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	80 83       	st	Z, r24
			break;
		}
	}
}
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	cf 91       	pop	r28
    1348:	df 91       	pop	r29
    134a:	08 95       	ret

0000134c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    134c:	df 93       	push	r29
    134e:	cf 93       	push	r28
    1350:	00 d0       	rcall	.+0      	; 0x1352 <GPIO_writePort+0x6>
    1352:	00 d0       	rcall	.+0      	; 0x1354 <GPIO_writePort+0x8>
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	84 30       	cpi	r24, 0x04	; 4
    1360:	90 f5       	brcc	.+100    	; 0x13c6 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	3c 83       	std	Y+4, r19	; 0x04
    136a:	2b 83       	std	Y+3, r18	; 0x03
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	9c 81       	ldd	r25, Y+4	; 0x04
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	91 05       	cpc	r25, r1
    1374:	d1 f0       	breq	.+52     	; 0x13aa <GPIO_writePort+0x5e>
    1376:	2b 81       	ldd	r18, Y+3	; 0x03
    1378:	3c 81       	ldd	r19, Y+4	; 0x04
    137a:	22 30       	cpi	r18, 0x02	; 2
    137c:	31 05       	cpc	r19, r1
    137e:	2c f4       	brge	.+10     	; 0x138a <GPIO_writePort+0x3e>
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	9c 81       	ldd	r25, Y+4	; 0x04
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	61 f0       	breq	.+24     	; 0x13a0 <GPIO_writePort+0x54>
    1388:	1e c0       	rjmp	.+60     	; 0x13c6 <GPIO_writePort+0x7a>
    138a:	2b 81       	ldd	r18, Y+3	; 0x03
    138c:	3c 81       	ldd	r19, Y+4	; 0x04
    138e:	22 30       	cpi	r18, 0x02	; 2
    1390:	31 05       	cpc	r19, r1
    1392:	81 f0       	breq	.+32     	; 0x13b4 <GPIO_writePort+0x68>
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	9c 81       	ldd	r25, Y+4	; 0x04
    1398:	83 30       	cpi	r24, 0x03	; 3
    139a:	91 05       	cpc	r25, r1
    139c:	81 f0       	breq	.+32     	; 0x13be <GPIO_writePort+0x72>
    139e:	13 c0       	rjmp	.+38     	; 0x13c6 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    13a0:	eb e3       	ldi	r30, 0x3B	; 59
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	80 83       	st	Z, r24
    13a8:	0e c0       	rjmp	.+28     	; 0x13c6 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    13aa:	e8 e3       	ldi	r30, 0x38	; 56
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	80 83       	st	Z, r24
    13b2:	09 c0       	rjmp	.+18     	; 0x13c6 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    13b4:	e5 e3       	ldi	r30, 0x35	; 53
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	80 83       	st	Z, r24
    13bc:	04 c0       	rjmp	.+8      	; 0x13c6 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    13be:	e2 e3       	ldi	r30, 0x32	; 50
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	80 83       	st	Z, r24
			break;
		}
	}
}
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	00 d0       	rcall	.+0      	; 0x13da <GPIO_readPort+0x6>
    13da:	00 d0       	rcall	.+0      	; 0x13dc <GPIO_readPort+0x8>
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    13e2:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	84 30       	cpi	r24, 0x04	; 4
    13e8:	90 f5       	brcc	.+100    	; 0x144e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	3c 83       	std	Y+4, r19	; 0x04
    13f2:	2b 83       	std	Y+3, r18	; 0x03
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	9c 81       	ldd	r25, Y+4	; 0x04
    13f8:	81 30       	cpi	r24, 0x01	; 1
    13fa:	91 05       	cpc	r25, r1
    13fc:	d1 f0       	breq	.+52     	; 0x1432 <GPIO_readPort+0x5e>
    13fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1400:	3c 81       	ldd	r19, Y+4	; 0x04
    1402:	22 30       	cpi	r18, 0x02	; 2
    1404:	31 05       	cpc	r19, r1
    1406:	2c f4       	brge	.+10     	; 0x1412 <GPIO_readPort+0x3e>
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	9c 81       	ldd	r25, Y+4	; 0x04
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	61 f0       	breq	.+24     	; 0x1428 <GPIO_readPort+0x54>
    1410:	1e c0       	rjmp	.+60     	; 0x144e <GPIO_readPort+0x7a>
    1412:	2b 81       	ldd	r18, Y+3	; 0x03
    1414:	3c 81       	ldd	r19, Y+4	; 0x04
    1416:	22 30       	cpi	r18, 0x02	; 2
    1418:	31 05       	cpc	r19, r1
    141a:	81 f0       	breq	.+32     	; 0x143c <GPIO_readPort+0x68>
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	9c 81       	ldd	r25, Y+4	; 0x04
    1420:	83 30       	cpi	r24, 0x03	; 3
    1422:	91 05       	cpc	r25, r1
    1424:	81 f0       	breq	.+32     	; 0x1446 <GPIO_readPort+0x72>
    1426:	13 c0       	rjmp	.+38     	; 0x144e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1428:	e9 e3       	ldi	r30, 0x39	; 57
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	89 83       	std	Y+1, r24	; 0x01
    1430:	0e c0       	rjmp	.+28     	; 0x144e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1432:	e6 e3       	ldi	r30, 0x36	; 54
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	09 c0       	rjmp	.+18     	; 0x144e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    143c:	e3 e3       	ldi	r30, 0x33	; 51
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	89 83       	std	Y+1, r24	; 0x01
    1444:	04 c0       	rjmp	.+8      	; 0x144e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1446:	e0 e3       	ldi	r30, 0x30	; 48
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    144e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	08 95       	ret

0000145e <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    145e:	df 93       	push	r29
    1460:	cf 93       	push	r28
    1462:	00 d0       	rcall	.+0      	; 0x1464 <KEYPAD_getPressedKey+0x6>
    1464:	0f 92       	push	r0
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    146a:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    146c:	1b 82       	std	Y+3, r1	; 0x03
    146e:	43 c0       	rjmp	.+134    	; 0x14f6 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	0e 94 62 09 	call	0x12c4	; 0x12c4 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	98 2f       	mov	r25, r24
    147c:	9c 5f       	subi	r25, 0xFC	; 252
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	69 2f       	mov	r22, r25
    1482:	41 e0       	ldi	r20, 0x01	; 1
    1484:	0e 94 f1 06 	call	0xde2	; 0xde2 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	88 2f       	mov	r24, r24
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	9c 01       	movw	r18, r24
    1490:	2c 5f       	subi	r18, 0xFC	; 252
    1492:	3f 4f       	sbci	r19, 0xFF	; 255
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	02 c0       	rjmp	.+4      	; 0x149e <KEYPAD_getPressedKey+0x40>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	2a 95       	dec	r18
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <KEYPAD_getPressedKey+0x3c>
    14a2:	80 95       	com	r24
    14a4:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	69 81       	ldd	r22, Y+1	; 0x01
    14aa:	0e 94 a6 09 	call	0x134c	; 0x134c <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    14ae:	1a 82       	std	Y+2, r1	; 0x02
    14b0:	1c c0       	rjmp	.+56     	; 0x14ea <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	6a 81       	ldd	r22, Y+2	; 0x02
    14b6:	0e 94 c7 08 	call	0x118e	; 0x118e <GPIO_readPin>
    14ba:	88 23       	and	r24, r24
    14bc:	99 f4       	brne	.+38     	; 0x14e4 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	88 2f       	mov	r24, r24
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	98 2f       	mov	r25, r24
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	89 0f       	add	r24, r25
    14d2:	8f 5f       	subi	r24, 0xFF	; 255
    14d4:	0e 94 80 0a 	call	0x1500	; 0x1500 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	8f 5f       	subi	r24, 0xFF	; 255
    14e8:	8a 83       	std	Y+2, r24	; 0x02
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	84 30       	cpi	r24, 0x04	; 4
    14ee:	08 f3       	brcs	.-62     	; 0x14b2 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	8f 5f       	subi	r24, 0xFF	; 255
    14f4:	8b 83       	std	Y+3, r24	; 0x03
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	84 30       	cpi	r24, 0x04	; 4
    14fa:	08 f4       	brcc	.+2      	; 0x14fe <KEYPAD_getPressedKey+0xa0>
    14fc:	b9 cf       	rjmp	.-142    	; 0x1470 <KEYPAD_getPressedKey+0x12>
    14fe:	b6 cf       	rjmp	.-148    	; 0x146c <KEYPAD_getPressedKey+0xe>

00001500 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	00 d0       	rcall	.+0      	; 0x1506 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1506:	00 d0       	rcall	.+0      	; 0x1508 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    150e:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	3c 83       	std	Y+4, r19	; 0x04
    1518:	2b 83       	std	Y+3, r18	; 0x03
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	9c 81       	ldd	r25, Y+4	; 0x04
    151e:	88 30       	cpi	r24, 0x08	; 8
    1520:	91 05       	cpc	r25, r1
    1522:	09 f4       	brne	.+2      	; 0x1526 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1524:	70 c0       	rjmp	.+224    	; 0x1606 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1526:	2b 81       	ldd	r18, Y+3	; 0x03
    1528:	3c 81       	ldd	r19, Y+4	; 0x04
    152a:	29 30       	cpi	r18, 0x09	; 9
    152c:	31 05       	cpc	r19, r1
    152e:	5c f5       	brge	.+86     	; 0x1586 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	9c 81       	ldd	r25, Y+4	; 0x04
    1534:	84 30       	cpi	r24, 0x04	; 4
    1536:	91 05       	cpc	r25, r1
    1538:	09 f4       	brne	.+2      	; 0x153c <KEYPAD_4x4_adjustKeyNumber+0x3c>
    153a:	59 c0       	rjmp	.+178    	; 0x15ee <KEYPAD_4x4_adjustKeyNumber+0xee>
    153c:	2b 81       	ldd	r18, Y+3	; 0x03
    153e:	3c 81       	ldd	r19, Y+4	; 0x04
    1540:	25 30       	cpi	r18, 0x05	; 5
    1542:	31 05       	cpc	r19, r1
    1544:	9c f4       	brge	.+38     	; 0x156c <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	9c 81       	ldd	r25, Y+4	; 0x04
    154a:	82 30       	cpi	r24, 0x02	; 2
    154c:	91 05       	cpc	r25, r1
    154e:	09 f4       	brne	.+2      	; 0x1552 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1550:	48 c0       	rjmp	.+144    	; 0x15e2 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1552:	2b 81       	ldd	r18, Y+3	; 0x03
    1554:	3c 81       	ldd	r19, Y+4	; 0x04
    1556:	23 30       	cpi	r18, 0x03	; 3
    1558:	31 05       	cpc	r19, r1
    155a:	0c f0       	brlt	.+2      	; 0x155e <KEYPAD_4x4_adjustKeyNumber+0x5e>
    155c:	45 c0       	rjmp	.+138    	; 0x15e8 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	9c 81       	ldd	r25, Y+4	; 0x04
    1562:	81 30       	cpi	r24, 0x01	; 1
    1564:	91 05       	cpc	r25, r1
    1566:	09 f4       	brne	.+2      	; 0x156a <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1568:	39 c0       	rjmp	.+114    	; 0x15dc <KEYPAD_4x4_adjustKeyNumber+0xdc>
    156a:	67 c0       	rjmp	.+206    	; 0x163a <KEYPAD_4x4_adjustKeyNumber+0x13a>
    156c:	2b 81       	ldd	r18, Y+3	; 0x03
    156e:	3c 81       	ldd	r19, Y+4	; 0x04
    1570:	26 30       	cpi	r18, 0x06	; 6
    1572:	31 05       	cpc	r19, r1
    1574:	09 f4       	brne	.+2      	; 0x1578 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1576:	41 c0       	rjmp	.+130    	; 0x15fa <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	87 30       	cpi	r24, 0x07	; 7
    157e:	91 05       	cpc	r25, r1
    1580:	0c f0       	brlt	.+2      	; 0x1584 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1582:	3e c0       	rjmp	.+124    	; 0x1600 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1584:	37 c0       	rjmp	.+110    	; 0x15f4 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1586:	2b 81       	ldd	r18, Y+3	; 0x03
    1588:	3c 81       	ldd	r19, Y+4	; 0x04
    158a:	2c 30       	cpi	r18, 0x0C	; 12
    158c:	31 05       	cpc	r19, r1
    158e:	09 f4       	brne	.+2      	; 0x1592 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1590:	46 c0       	rjmp	.+140    	; 0x161e <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	9c 81       	ldd	r25, Y+4	; 0x04
    1596:	8d 30       	cpi	r24, 0x0D	; 13
    1598:	91 05       	cpc	r25, r1
    159a:	5c f4       	brge	.+22     	; 0x15b2 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    159c:	2b 81       	ldd	r18, Y+3	; 0x03
    159e:	3c 81       	ldd	r19, Y+4	; 0x04
    15a0:	2a 30       	cpi	r18, 0x0A	; 10
    15a2:	31 05       	cpc	r19, r1
    15a4:	b1 f1       	breq	.+108    	; 0x1612 <KEYPAD_4x4_adjustKeyNumber+0x112>
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	9c 81       	ldd	r25, Y+4	; 0x04
    15aa:	8b 30       	cpi	r24, 0x0B	; 11
    15ac:	91 05       	cpc	r25, r1
    15ae:	a4 f5       	brge	.+104    	; 0x1618 <KEYPAD_4x4_adjustKeyNumber+0x118>
    15b0:	2d c0       	rjmp	.+90     	; 0x160c <KEYPAD_4x4_adjustKeyNumber+0x10c>
    15b2:	2b 81       	ldd	r18, Y+3	; 0x03
    15b4:	3c 81       	ldd	r19, Y+4	; 0x04
    15b6:	2e 30       	cpi	r18, 0x0E	; 14
    15b8:	31 05       	cpc	r19, r1
    15ba:	b9 f1       	breq	.+110    	; 0x162a <KEYPAD_4x4_adjustKeyNumber+0x12a>
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	9c 81       	ldd	r25, Y+4	; 0x04
    15c0:	8e 30       	cpi	r24, 0x0E	; 14
    15c2:	91 05       	cpc	r25, r1
    15c4:	7c f1       	brlt	.+94     	; 0x1624 <KEYPAD_4x4_adjustKeyNumber+0x124>
    15c6:	2b 81       	ldd	r18, Y+3	; 0x03
    15c8:	3c 81       	ldd	r19, Y+4	; 0x04
    15ca:	2f 30       	cpi	r18, 0x0F	; 15
    15cc:	31 05       	cpc	r19, r1
    15ce:	79 f1       	breq	.+94     	; 0x162e <KEYPAD_4x4_adjustKeyNumber+0x12e>
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	9c 81       	ldd	r25, Y+4	; 0x04
    15d4:	80 31       	cpi	r24, 0x10	; 16
    15d6:	91 05       	cpc	r25, r1
    15d8:	69 f1       	breq	.+90     	; 0x1634 <KEYPAD_4x4_adjustKeyNumber+0x134>
    15da:	2f c0       	rjmp	.+94     	; 0x163a <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    15dc:	87 e0       	ldi	r24, 0x07	; 7
    15de:	89 83       	std	Y+1, r24	; 0x01
    15e0:	2e c0       	rjmp	.+92     	; 0x163e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    15e2:	88 e0       	ldi	r24, 0x08	; 8
    15e4:	89 83       	std	Y+1, r24	; 0x01
    15e6:	2b c0       	rjmp	.+86     	; 0x163e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    15e8:	89 e0       	ldi	r24, 0x09	; 9
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	28 c0       	rjmp	.+80     	; 0x163e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    15ee:	85 e2       	ldi	r24, 0x25	; 37
    15f0:	89 83       	std	Y+1, r24	; 0x01
    15f2:	25 c0       	rjmp	.+74     	; 0x163e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    15f4:	84 e0       	ldi	r24, 0x04	; 4
    15f6:	89 83       	std	Y+1, r24	; 0x01
    15f8:	22 c0       	rjmp	.+68     	; 0x163e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    15fa:	85 e0       	ldi	r24, 0x05	; 5
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	1f c0       	rjmp	.+62     	; 0x163e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1600:	86 e0       	ldi	r24, 0x06	; 6
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	1c c0       	rjmp	.+56     	; 0x163e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1606:	8a e2       	ldi	r24, 0x2A	; 42
    1608:	89 83       	std	Y+1, r24	; 0x01
    160a:	19 c0       	rjmp	.+50     	; 0x163e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	16 c0       	rjmp	.+44     	; 0x163e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1612:	82 e0       	ldi	r24, 0x02	; 2
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	13 c0       	rjmp	.+38     	; 0x163e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1618:	83 e0       	ldi	r24, 0x03	; 3
    161a:	89 83       	std	Y+1, r24	; 0x01
    161c:	10 c0       	rjmp	.+32     	; 0x163e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    161e:	8d e2       	ldi	r24, 0x2D	; 45
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	0d c0       	rjmp	.+26     	; 0x163e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1624:	8d e0       	ldi	r24, 0x0D	; 13
    1626:	89 83       	std	Y+1, r24	; 0x01
    1628:	0a c0       	rjmp	.+20     	; 0x163e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    162a:	19 82       	std	Y+1, r1	; 0x01
    162c:	08 c0       	rjmp	.+16     	; 0x163e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    162e:	8d e3       	ldi	r24, 0x3D	; 61
    1630:	89 83       	std	Y+1, r24	; 0x01
    1632:	05 c0       	rjmp	.+10     	; 0x163e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1634:	8b e2       	ldi	r24, 0x2B	; 43
    1636:	89 83       	std	Y+1, r24	; 0x01
    1638:	02 c0       	rjmp	.+4      	; 0x163e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    163e:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	08 95       	ret

0000164e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    164e:	df 93       	push	r29
    1650:	cf 93       	push	r28
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1656:	83 e0       	ldi	r24, 0x03	; 3
    1658:	64 e0       	ldi	r22, 0x04	; 4
    165a:	41 e0       	ldi	r20, 0x01	; 1
    165c:	0e 94 f1 06 	call	0xde2	; 0xde2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1660:	83 e0       	ldi	r24, 0x03	; 3
    1662:	65 e0       	ldi	r22, 0x05	; 5
    1664:	41 e0       	ldi	r20, 0x01	; 1
    1666:	0e 94 f1 06 	call	0xde2	; 0xde2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    166a:	83 e0       	ldi	r24, 0x03	; 3
    166c:	66 e0       	ldi	r22, 0x06	; 6
    166e:	41 e0       	ldi	r20, 0x01	; 1
    1670:	0e 94 f1 06 	call	0xde2	; 0xde2 <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1674:	82 e0       	ldi	r24, 0x02	; 2
    1676:	6f ef       	ldi	r22, 0xFF	; 255
    1678:	0e 94 62 09 	call	0x12c4	; 0x12c4 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    167c:	88 e3       	ldi	r24, 0x38	; 56
    167e:	0e 94 4a 0b 	call	0x1694	; 0x1694 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1682:	8c e0       	ldi	r24, 0x0C	; 12
    1684:	0e 94 4a 0b 	call	0x1694	; 0x1694 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	0e 94 4a 0b 	call	0x1694	; 0x1694 <LCD_sendCommand>
}
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
    169c:	ea 97       	sbiw	r28, 0x3a	; 58
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	de bf       	out	0x3e, r29	; 62
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	cd bf       	out	0x3d, r28	; 61
    16a8:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    16aa:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    16ac:	83 e0       	ldi	r24, 0x03	; 3
    16ae:	64 e0       	ldi	r22, 0x04	; 4
    16b0:	40 e0       	ldi	r20, 0x00	; 0
    16b2:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    16b6:	83 e0       	ldi	r24, 0x03	; 3
    16b8:	65 e0       	ldi	r22, 0x05	; 5
    16ba:	40 e0       	ldi	r20, 0x00	; 0
    16bc:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <GPIO_writePin>
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	a0 e8       	ldi	r26, 0x80	; 128
    16c6:	bf e3       	ldi	r27, 0x3F	; 63
    16c8:	8d ab       	std	Y+53, r24	; 0x35
    16ca:	9e ab       	std	Y+54, r25	; 0x36
    16cc:	af ab       	std	Y+55, r26	; 0x37
    16ce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d0:	6d a9       	ldd	r22, Y+53	; 0x35
    16d2:	7e a9       	ldd	r23, Y+54	; 0x36
    16d4:	8f a9       	ldd	r24, Y+55	; 0x37
    16d6:	98 ad       	ldd	r25, Y+56	; 0x38
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	4a e7       	ldi	r20, 0x7A	; 122
    16de:	53 e4       	ldi	r21, 0x43	; 67
    16e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	89 ab       	std	Y+49, r24	; 0x31
    16ea:	9a ab       	std	Y+50, r25	; 0x32
    16ec:	ab ab       	std	Y+51, r26	; 0x33
    16ee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16f0:	69 a9       	ldd	r22, Y+49	; 0x31
    16f2:	7a a9       	ldd	r23, Y+50	; 0x32
    16f4:	8b a9       	ldd	r24, Y+51	; 0x33
    16f6:	9c a9       	ldd	r25, Y+52	; 0x34
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	40 e8       	ldi	r20, 0x80	; 128
    16fe:	5f e3       	ldi	r21, 0x3F	; 63
    1700:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1704:	88 23       	and	r24, r24
    1706:	2c f4       	brge	.+10     	; 0x1712 <LCD_sendCommand+0x7e>
		__ticks = 1;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	98 ab       	std	Y+48, r25	; 0x30
    170e:	8f a7       	std	Y+47, r24	; 0x2f
    1710:	3f c0       	rjmp	.+126    	; 0x1790 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    1712:	69 a9       	ldd	r22, Y+49	; 0x31
    1714:	7a a9       	ldd	r23, Y+50	; 0x32
    1716:	8b a9       	ldd	r24, Y+51	; 0x33
    1718:	9c a9       	ldd	r25, Y+52	; 0x34
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	3f ef       	ldi	r19, 0xFF	; 255
    171e:	4f e7       	ldi	r20, 0x7F	; 127
    1720:	57 e4       	ldi	r21, 0x47	; 71
    1722:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1726:	18 16       	cp	r1, r24
    1728:	4c f5       	brge	.+82     	; 0x177c <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    172a:	6d a9       	ldd	r22, Y+53	; 0x35
    172c:	7e a9       	ldd	r23, Y+54	; 0x36
    172e:	8f a9       	ldd	r24, Y+55	; 0x37
    1730:	98 ad       	ldd	r25, Y+56	; 0x38
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e2       	ldi	r20, 0x20	; 32
    1738:	51 e4       	ldi	r21, 0x41	; 65
    173a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	bc 01       	movw	r22, r24
    1744:	cd 01       	movw	r24, r26
    1746:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	98 ab       	std	Y+48, r25	; 0x30
    1750:	8f a7       	std	Y+47, r24	; 0x2f
    1752:	0f c0       	rjmp	.+30     	; 0x1772 <LCD_sendCommand+0xde>
    1754:	89 e1       	ldi	r24, 0x19	; 25
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	9e a7       	std	Y+46, r25	; 0x2e
    175a:	8d a7       	std	Y+45, r24	; 0x2d
    175c:	8d a5       	ldd	r24, Y+45	; 0x2d
    175e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	f1 f7       	brne	.-4      	; 0x1760 <LCD_sendCommand+0xcc>
    1764:	9e a7       	std	Y+46, r25	; 0x2e
    1766:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1768:	8f a5       	ldd	r24, Y+47	; 0x2f
    176a:	98 a9       	ldd	r25, Y+48	; 0x30
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	98 ab       	std	Y+48, r25	; 0x30
    1770:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1772:	8f a5       	ldd	r24, Y+47	; 0x2f
    1774:	98 a9       	ldd	r25, Y+48	; 0x30
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	69 f7       	brne	.-38     	; 0x1754 <LCD_sendCommand+0xc0>
    177a:	14 c0       	rjmp	.+40     	; 0x17a4 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    177c:	69 a9       	ldd	r22, Y+49	; 0x31
    177e:	7a a9       	ldd	r23, Y+50	; 0x32
    1780:	8b a9       	ldd	r24, Y+51	; 0x33
    1782:	9c a9       	ldd	r25, Y+52	; 0x34
    1784:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	98 ab       	std	Y+48, r25	; 0x30
    178e:	8f a7       	std	Y+47, r24	; 0x2f
    1790:	8f a5       	ldd	r24, Y+47	; 0x2f
    1792:	98 a9       	ldd	r25, Y+48	; 0x30
    1794:	9c a7       	std	Y+44, r25	; 0x2c
    1796:	8b a7       	std	Y+43, r24	; 0x2b
    1798:	8b a5       	ldd	r24, Y+43	; 0x2b
    179a:	9c a5       	ldd	r25, Y+44	; 0x2c
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <LCD_sendCommand+0x108>
    17a0:	9c a7       	std	Y+44, r25	; 0x2c
    17a2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    17a4:	83 e0       	ldi	r24, 0x03	; 3
    17a6:	66 e0       	ldi	r22, 0x06	; 6
    17a8:	41 e0       	ldi	r20, 0x01	; 1
    17aa:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <GPIO_writePin>
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	a0 e8       	ldi	r26, 0x80	; 128
    17b4:	bf e3       	ldi	r27, 0x3F	; 63
    17b6:	8f a3       	std	Y+39, r24	; 0x27
    17b8:	98 a7       	std	Y+40, r25	; 0x28
    17ba:	a9 a7       	std	Y+41, r26	; 0x29
    17bc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17be:	6f a1       	ldd	r22, Y+39	; 0x27
    17c0:	78 a5       	ldd	r23, Y+40	; 0x28
    17c2:	89 a5       	ldd	r24, Y+41	; 0x29
    17c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	4a e7       	ldi	r20, 0x7A	; 122
    17cc:	53 e4       	ldi	r21, 0x43	; 67
    17ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	8b a3       	std	Y+35, r24	; 0x23
    17d8:	9c a3       	std	Y+36, r25	; 0x24
    17da:	ad a3       	std	Y+37, r26	; 0x25
    17dc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17de:	6b a1       	ldd	r22, Y+35	; 0x23
    17e0:	7c a1       	ldd	r23, Y+36	; 0x24
    17e2:	8d a1       	ldd	r24, Y+37	; 0x25
    17e4:	9e a1       	ldd	r25, Y+38	; 0x26
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e8       	ldi	r20, 0x80	; 128
    17ec:	5f e3       	ldi	r21, 0x3F	; 63
    17ee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17f2:	88 23       	and	r24, r24
    17f4:	2c f4       	brge	.+10     	; 0x1800 <LCD_sendCommand+0x16c>
		__ticks = 1;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	9a a3       	std	Y+34, r25	; 0x22
    17fc:	89 a3       	std	Y+33, r24	; 0x21
    17fe:	3f c0       	rjmp	.+126    	; 0x187e <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    1800:	6b a1       	ldd	r22, Y+35	; 0x23
    1802:	7c a1       	ldd	r23, Y+36	; 0x24
    1804:	8d a1       	ldd	r24, Y+37	; 0x25
    1806:	9e a1       	ldd	r25, Y+38	; 0x26
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	3f ef       	ldi	r19, 0xFF	; 255
    180c:	4f e7       	ldi	r20, 0x7F	; 127
    180e:	57 e4       	ldi	r21, 0x47	; 71
    1810:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1814:	18 16       	cp	r1, r24
    1816:	4c f5       	brge	.+82     	; 0x186a <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1818:	6f a1       	ldd	r22, Y+39	; 0x27
    181a:	78 a5       	ldd	r23, Y+40	; 0x28
    181c:	89 a5       	ldd	r24, Y+41	; 0x29
    181e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e2       	ldi	r20, 0x20	; 32
    1826:	51 e4       	ldi	r21, 0x41	; 65
    1828:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	bc 01       	movw	r22, r24
    1832:	cd 01       	movw	r24, r26
    1834:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	9a a3       	std	Y+34, r25	; 0x22
    183e:	89 a3       	std	Y+33, r24	; 0x21
    1840:	0f c0       	rjmp	.+30     	; 0x1860 <LCD_sendCommand+0x1cc>
    1842:	89 e1       	ldi	r24, 0x19	; 25
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	98 a3       	std	Y+32, r25	; 0x20
    1848:	8f 8f       	std	Y+31, r24	; 0x1f
    184a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    184c:	98 a1       	ldd	r25, Y+32	; 0x20
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	f1 f7       	brne	.-4      	; 0x184e <LCD_sendCommand+0x1ba>
    1852:	98 a3       	std	Y+32, r25	; 0x20
    1854:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1856:	89 a1       	ldd	r24, Y+33	; 0x21
    1858:	9a a1       	ldd	r25, Y+34	; 0x22
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	9a a3       	std	Y+34, r25	; 0x22
    185e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1860:	89 a1       	ldd	r24, Y+33	; 0x21
    1862:	9a a1       	ldd	r25, Y+34	; 0x22
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	69 f7       	brne	.-38     	; 0x1842 <LCD_sendCommand+0x1ae>
    1868:	14 c0       	rjmp	.+40     	; 0x1892 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186a:	6b a1       	ldd	r22, Y+35	; 0x23
    186c:	7c a1       	ldd	r23, Y+36	; 0x24
    186e:	8d a1       	ldd	r24, Y+37	; 0x25
    1870:	9e a1       	ldd	r25, Y+38	; 0x26
    1872:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	9a a3       	std	Y+34, r25	; 0x22
    187c:	89 a3       	std	Y+33, r24	; 0x21
    187e:	89 a1       	ldd	r24, Y+33	; 0x21
    1880:	9a a1       	ldd	r25, Y+34	; 0x22
    1882:	9e 8f       	std	Y+30, r25	; 0x1e
    1884:	8d 8f       	std	Y+29, r24	; 0x1d
    1886:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1888:	9e 8d       	ldd	r25, Y+30	; 0x1e
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	f1 f7       	brne	.-4      	; 0x188a <LCD_sendCommand+0x1f6>
    188e:	9e 8f       	std	Y+30, r25	; 0x1e
    1890:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1892:	82 e0       	ldi	r24, 0x02	; 2
    1894:	6a ad       	ldd	r22, Y+58	; 0x3a
    1896:	0e 94 a6 09 	call	0x134c	; 0x134c <GPIO_writePort>
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	a0 e8       	ldi	r26, 0x80	; 128
    18a0:	bf e3       	ldi	r27, 0x3F	; 63
    18a2:	89 8f       	std	Y+25, r24	; 0x19
    18a4:	9a 8f       	std	Y+26, r25	; 0x1a
    18a6:	ab 8f       	std	Y+27, r26	; 0x1b
    18a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18aa:	69 8d       	ldd	r22, Y+25	; 0x19
    18ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	4a e7       	ldi	r20, 0x7A	; 122
    18b8:	53 e4       	ldi	r21, 0x43	; 67
    18ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	8d 8b       	std	Y+21, r24	; 0x15
    18c4:	9e 8b       	std	Y+22, r25	; 0x16
    18c6:	af 8b       	std	Y+23, r26	; 0x17
    18c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18ca:	6d 89       	ldd	r22, Y+21	; 0x15
    18cc:	7e 89       	ldd	r23, Y+22	; 0x16
    18ce:	8f 89       	ldd	r24, Y+23	; 0x17
    18d0:	98 8d       	ldd	r25, Y+24	; 0x18
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	40 e8       	ldi	r20, 0x80	; 128
    18d8:	5f e3       	ldi	r21, 0x3F	; 63
    18da:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18de:	88 23       	and	r24, r24
    18e0:	2c f4       	brge	.+10     	; 0x18ec <LCD_sendCommand+0x258>
		__ticks = 1;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	9c 8b       	std	Y+20, r25	; 0x14
    18e8:	8b 8b       	std	Y+19, r24	; 0x13
    18ea:	3f c0       	rjmp	.+126    	; 0x196a <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    18ec:	6d 89       	ldd	r22, Y+21	; 0x15
    18ee:	7e 89       	ldd	r23, Y+22	; 0x16
    18f0:	8f 89       	ldd	r24, Y+23	; 0x17
    18f2:	98 8d       	ldd	r25, Y+24	; 0x18
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	3f ef       	ldi	r19, 0xFF	; 255
    18f8:	4f e7       	ldi	r20, 0x7F	; 127
    18fa:	57 e4       	ldi	r21, 0x47	; 71
    18fc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1900:	18 16       	cp	r1, r24
    1902:	4c f5       	brge	.+82     	; 0x1956 <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1904:	69 8d       	ldd	r22, Y+25	; 0x19
    1906:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1908:	8b 8d       	ldd	r24, Y+27	; 0x1b
    190a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	40 e2       	ldi	r20, 0x20	; 32
    1912:	51 e4       	ldi	r21, 0x41	; 65
    1914:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	bc 01       	movw	r22, r24
    191e:	cd 01       	movw	r24, r26
    1920:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	9c 8b       	std	Y+20, r25	; 0x14
    192a:	8b 8b       	std	Y+19, r24	; 0x13
    192c:	0f c0       	rjmp	.+30     	; 0x194c <LCD_sendCommand+0x2b8>
    192e:	89 e1       	ldi	r24, 0x19	; 25
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	9a 8b       	std	Y+18, r25	; 0x12
    1934:	89 8b       	std	Y+17, r24	; 0x11
    1936:	89 89       	ldd	r24, Y+17	; 0x11
    1938:	9a 89       	ldd	r25, Y+18	; 0x12
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	f1 f7       	brne	.-4      	; 0x193a <LCD_sendCommand+0x2a6>
    193e:	9a 8b       	std	Y+18, r25	; 0x12
    1940:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1942:	8b 89       	ldd	r24, Y+19	; 0x13
    1944:	9c 89       	ldd	r25, Y+20	; 0x14
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	9c 8b       	std	Y+20, r25	; 0x14
    194a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    194c:	8b 89       	ldd	r24, Y+19	; 0x13
    194e:	9c 89       	ldd	r25, Y+20	; 0x14
    1950:	00 97       	sbiw	r24, 0x00	; 0
    1952:	69 f7       	brne	.-38     	; 0x192e <LCD_sendCommand+0x29a>
    1954:	14 c0       	rjmp	.+40     	; 0x197e <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1956:	6d 89       	ldd	r22, Y+21	; 0x15
    1958:	7e 89       	ldd	r23, Y+22	; 0x16
    195a:	8f 89       	ldd	r24, Y+23	; 0x17
    195c:	98 8d       	ldd	r25, Y+24	; 0x18
    195e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	9c 8b       	std	Y+20, r25	; 0x14
    1968:	8b 8b       	std	Y+19, r24	; 0x13
    196a:	8b 89       	ldd	r24, Y+19	; 0x13
    196c:	9c 89       	ldd	r25, Y+20	; 0x14
    196e:	98 8b       	std	Y+16, r25	; 0x10
    1970:	8f 87       	std	Y+15, r24	; 0x0f
    1972:	8f 85       	ldd	r24, Y+15	; 0x0f
    1974:	98 89       	ldd	r25, Y+16	; 0x10
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	f1 f7       	brne	.-4      	; 0x1976 <LCD_sendCommand+0x2e2>
    197a:	98 8b       	std	Y+16, r25	; 0x10
    197c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    197e:	83 e0       	ldi	r24, 0x03	; 3
    1980:	66 e0       	ldi	r22, 0x06	; 6
    1982:	40 e0       	ldi	r20, 0x00	; 0
    1984:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <GPIO_writePin>
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	a0 e8       	ldi	r26, 0x80	; 128
    198e:	bf e3       	ldi	r27, 0x3F	; 63
    1990:	8b 87       	std	Y+11, r24	; 0x0b
    1992:	9c 87       	std	Y+12, r25	; 0x0c
    1994:	ad 87       	std	Y+13, r26	; 0x0d
    1996:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1998:	6b 85       	ldd	r22, Y+11	; 0x0b
    199a:	7c 85       	ldd	r23, Y+12	; 0x0c
    199c:	8d 85       	ldd	r24, Y+13	; 0x0d
    199e:	9e 85       	ldd	r25, Y+14	; 0x0e
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	4a e7       	ldi	r20, 0x7A	; 122
    19a6:	53 e4       	ldi	r21, 0x43	; 67
    19a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	8f 83       	std	Y+7, r24	; 0x07
    19b2:	98 87       	std	Y+8, r25	; 0x08
    19b4:	a9 87       	std	Y+9, r26	; 0x09
    19b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19b8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ba:	78 85       	ldd	r23, Y+8	; 0x08
    19bc:	89 85       	ldd	r24, Y+9	; 0x09
    19be:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	40 e8       	ldi	r20, 0x80	; 128
    19c6:	5f e3       	ldi	r21, 0x3F	; 63
    19c8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19cc:	88 23       	and	r24, r24
    19ce:	2c f4       	brge	.+10     	; 0x19da <LCD_sendCommand+0x346>
		__ticks = 1;
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	9e 83       	std	Y+6, r25	; 0x06
    19d6:	8d 83       	std	Y+5, r24	; 0x05
    19d8:	3f c0       	rjmp	.+126    	; 0x1a58 <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    19da:	6f 81       	ldd	r22, Y+7	; 0x07
    19dc:	78 85       	ldd	r23, Y+8	; 0x08
    19de:	89 85       	ldd	r24, Y+9	; 0x09
    19e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	3f ef       	ldi	r19, 0xFF	; 255
    19e6:	4f e7       	ldi	r20, 0x7F	; 127
    19e8:	57 e4       	ldi	r21, 0x47	; 71
    19ea:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19ee:	18 16       	cp	r1, r24
    19f0:	4c f5       	brge	.+82     	; 0x1a44 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	40 e2       	ldi	r20, 0x20	; 32
    1a00:	51 e4       	ldi	r21, 0x41	; 65
    1a02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	bc 01       	movw	r22, r24
    1a0c:	cd 01       	movw	r24, r26
    1a0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	9e 83       	std	Y+6, r25	; 0x06
    1a18:	8d 83       	std	Y+5, r24	; 0x05
    1a1a:	0f c0       	rjmp	.+30     	; 0x1a3a <LCD_sendCommand+0x3a6>
    1a1c:	89 e1       	ldi	r24, 0x19	; 25
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	9c 83       	std	Y+4, r25	; 0x04
    1a22:	8b 83       	std	Y+3, r24	; 0x03
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	9c 81       	ldd	r25, Y+4	; 0x04
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	f1 f7       	brne	.-4      	; 0x1a28 <LCD_sendCommand+0x394>
    1a2c:	9c 83       	std	Y+4, r25	; 0x04
    1a2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a30:	8d 81       	ldd	r24, Y+5	; 0x05
    1a32:	9e 81       	ldd	r25, Y+6	; 0x06
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	9e 83       	std	Y+6, r25	; 0x06
    1a38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3e:	00 97       	sbiw	r24, 0x00	; 0
    1a40:	69 f7       	brne	.-38     	; 0x1a1c <LCD_sendCommand+0x388>
    1a42:	14 c0       	rjmp	.+40     	; 0x1a6c <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a44:	6f 81       	ldd	r22, Y+7	; 0x07
    1a46:	78 85       	ldd	r23, Y+8	; 0x08
    1a48:	89 85       	ldd	r24, Y+9	; 0x09
    1a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	9e 83       	std	Y+6, r25	; 0x06
    1a56:	8d 83       	std	Y+5, r24	; 0x05
    1a58:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a5c:	9a 83       	std	Y+2, r25	; 0x02
    1a5e:	89 83       	std	Y+1, r24	; 0x01
    1a60:	89 81       	ldd	r24, Y+1	; 0x01
    1a62:	9a 81       	ldd	r25, Y+2	; 0x02
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	f1 f7       	brne	.-4      	; 0x1a64 <LCD_sendCommand+0x3d0>
    1a68:	9a 83       	std	Y+2, r25	; 0x02
    1a6a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1a6c:	ea 96       	adiw	r28, 0x3a	; 58
    1a6e:	0f b6       	in	r0, 0x3f	; 63
    1a70:	f8 94       	cli
    1a72:	de bf       	out	0x3e, r29	; 62
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	cd bf       	out	0x3d, r28	; 61
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret

00001a7e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
    1a86:	ea 97       	sbiw	r28, 0x3a	; 58
    1a88:	0f b6       	in	r0, 0x3f	; 63
    1a8a:	f8 94       	cli
    1a8c:	de bf       	out	0x3e, r29	; 62
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	cd bf       	out	0x3d, r28	; 61
    1a92:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1a94:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1a96:	83 e0       	ldi	r24, 0x03	; 3
    1a98:	64 e0       	ldi	r22, 0x04	; 4
    1a9a:	41 e0       	ldi	r20, 0x01	; 1
    1a9c:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1aa0:	83 e0       	ldi	r24, 0x03	; 3
    1aa2:	65 e0       	ldi	r22, 0x05	; 5
    1aa4:	40 e0       	ldi	r20, 0x00	; 0
    1aa6:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <GPIO_writePin>
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	a0 e8       	ldi	r26, 0x80	; 128
    1ab0:	bf e3       	ldi	r27, 0x3F	; 63
    1ab2:	8d ab       	std	Y+53, r24	; 0x35
    1ab4:	9e ab       	std	Y+54, r25	; 0x36
    1ab6:	af ab       	std	Y+55, r26	; 0x37
    1ab8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aba:	6d a9       	ldd	r22, Y+53	; 0x35
    1abc:	7e a9       	ldd	r23, Y+54	; 0x36
    1abe:	8f a9       	ldd	r24, Y+55	; 0x37
    1ac0:	98 ad       	ldd	r25, Y+56	; 0x38
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	4a e7       	ldi	r20, 0x7A	; 122
    1ac8:	53 e4       	ldi	r21, 0x43	; 67
    1aca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	89 ab       	std	Y+49, r24	; 0x31
    1ad4:	9a ab       	std	Y+50, r25	; 0x32
    1ad6:	ab ab       	std	Y+51, r26	; 0x33
    1ad8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ada:	69 a9       	ldd	r22, Y+49	; 0x31
    1adc:	7a a9       	ldd	r23, Y+50	; 0x32
    1ade:	8b a9       	ldd	r24, Y+51	; 0x33
    1ae0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e8       	ldi	r20, 0x80	; 128
    1ae8:	5f e3       	ldi	r21, 0x3F	; 63
    1aea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1aee:	88 23       	and	r24, r24
    1af0:	2c f4       	brge	.+10     	; 0x1afc <LCD_displayCharacter+0x7e>
		__ticks = 1;
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	98 ab       	std	Y+48, r25	; 0x30
    1af8:	8f a7       	std	Y+47, r24	; 0x2f
    1afa:	3f c0       	rjmp	.+126    	; 0x1b7a <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    1afc:	69 a9       	ldd	r22, Y+49	; 0x31
    1afe:	7a a9       	ldd	r23, Y+50	; 0x32
    1b00:	8b a9       	ldd	r24, Y+51	; 0x33
    1b02:	9c a9       	ldd	r25, Y+52	; 0x34
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	3f ef       	ldi	r19, 0xFF	; 255
    1b08:	4f e7       	ldi	r20, 0x7F	; 127
    1b0a:	57 e4       	ldi	r21, 0x47	; 71
    1b0c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b10:	18 16       	cp	r1, r24
    1b12:	4c f5       	brge	.+82     	; 0x1b66 <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b14:	6d a9       	ldd	r22, Y+53	; 0x35
    1b16:	7e a9       	ldd	r23, Y+54	; 0x36
    1b18:	8f a9       	ldd	r24, Y+55	; 0x37
    1b1a:	98 ad       	ldd	r25, Y+56	; 0x38
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e2       	ldi	r20, 0x20	; 32
    1b22:	51 e4       	ldi	r21, 0x41	; 65
    1b24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	bc 01       	movw	r22, r24
    1b2e:	cd 01       	movw	r24, r26
    1b30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	98 ab       	std	Y+48, r25	; 0x30
    1b3a:	8f a7       	std	Y+47, r24	; 0x2f
    1b3c:	0f c0       	rjmp	.+30     	; 0x1b5c <LCD_displayCharacter+0xde>
    1b3e:	89 e1       	ldi	r24, 0x19	; 25
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	9e a7       	std	Y+46, r25	; 0x2e
    1b44:	8d a7       	std	Y+45, r24	; 0x2d
    1b46:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b48:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	f1 f7       	brne	.-4      	; 0x1b4a <LCD_displayCharacter+0xcc>
    1b4e:	9e a7       	std	Y+46, r25	; 0x2e
    1b50:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b52:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b54:	98 a9       	ldd	r25, Y+48	; 0x30
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	98 ab       	std	Y+48, r25	; 0x30
    1b5a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b5e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b60:	00 97       	sbiw	r24, 0x00	; 0
    1b62:	69 f7       	brne	.-38     	; 0x1b3e <LCD_displayCharacter+0xc0>
    1b64:	14 c0       	rjmp	.+40     	; 0x1b8e <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b66:	69 a9       	ldd	r22, Y+49	; 0x31
    1b68:	7a a9       	ldd	r23, Y+50	; 0x32
    1b6a:	8b a9       	ldd	r24, Y+51	; 0x33
    1b6c:	9c a9       	ldd	r25, Y+52	; 0x34
    1b6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	98 ab       	std	Y+48, r25	; 0x30
    1b78:	8f a7       	std	Y+47, r24	; 0x2f
    1b7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b7c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b7e:	9c a7       	std	Y+44, r25	; 0x2c
    1b80:	8b a7       	std	Y+43, r24	; 0x2b
    1b82:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b84:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	f1 f7       	brne	.-4      	; 0x1b86 <LCD_displayCharacter+0x108>
    1b8a:	9c a7       	std	Y+44, r25	; 0x2c
    1b8c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1b8e:	83 e0       	ldi	r24, 0x03	; 3
    1b90:	66 e0       	ldi	r22, 0x06	; 6
    1b92:	41 e0       	ldi	r20, 0x01	; 1
    1b94:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <GPIO_writePin>
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	a0 e8       	ldi	r26, 0x80	; 128
    1b9e:	bf e3       	ldi	r27, 0x3F	; 63
    1ba0:	8f a3       	std	Y+39, r24	; 0x27
    1ba2:	98 a7       	std	Y+40, r25	; 0x28
    1ba4:	a9 a7       	std	Y+41, r26	; 0x29
    1ba6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba8:	6f a1       	ldd	r22, Y+39	; 0x27
    1baa:	78 a5       	ldd	r23, Y+40	; 0x28
    1bac:	89 a5       	ldd	r24, Y+41	; 0x29
    1bae:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	4a e7       	ldi	r20, 0x7A	; 122
    1bb6:	53 e4       	ldi	r21, 0x43	; 67
    1bb8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	8b a3       	std	Y+35, r24	; 0x23
    1bc2:	9c a3       	std	Y+36, r25	; 0x24
    1bc4:	ad a3       	std	Y+37, r26	; 0x25
    1bc6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bc8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bca:	7c a1       	ldd	r23, Y+36	; 0x24
    1bcc:	8d a1       	ldd	r24, Y+37	; 0x25
    1bce:	9e a1       	ldd	r25, Y+38	; 0x26
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	40 e8       	ldi	r20, 0x80	; 128
    1bd6:	5f e3       	ldi	r21, 0x3F	; 63
    1bd8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bdc:	88 23       	and	r24, r24
    1bde:	2c f4       	brge	.+10     	; 0x1bea <LCD_displayCharacter+0x16c>
		__ticks = 1;
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	9a a3       	std	Y+34, r25	; 0x22
    1be6:	89 a3       	std	Y+33, r24	; 0x21
    1be8:	3f c0       	rjmp	.+126    	; 0x1c68 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    1bea:	6b a1       	ldd	r22, Y+35	; 0x23
    1bec:	7c a1       	ldd	r23, Y+36	; 0x24
    1bee:	8d a1       	ldd	r24, Y+37	; 0x25
    1bf0:	9e a1       	ldd	r25, Y+38	; 0x26
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	3f ef       	ldi	r19, 0xFF	; 255
    1bf6:	4f e7       	ldi	r20, 0x7F	; 127
    1bf8:	57 e4       	ldi	r21, 0x47	; 71
    1bfa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bfe:	18 16       	cp	r1, r24
    1c00:	4c f5       	brge	.+82     	; 0x1c54 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c02:	6f a1       	ldd	r22, Y+39	; 0x27
    1c04:	78 a5       	ldd	r23, Y+40	; 0x28
    1c06:	89 a5       	ldd	r24, Y+41	; 0x29
    1c08:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	40 e2       	ldi	r20, 0x20	; 32
    1c10:	51 e4       	ldi	r21, 0x41	; 65
    1c12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	bc 01       	movw	r22, r24
    1c1c:	cd 01       	movw	r24, r26
    1c1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	9a a3       	std	Y+34, r25	; 0x22
    1c28:	89 a3       	std	Y+33, r24	; 0x21
    1c2a:	0f c0       	rjmp	.+30     	; 0x1c4a <LCD_displayCharacter+0x1cc>
    1c2c:	89 e1       	ldi	r24, 0x19	; 25
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	98 a3       	std	Y+32, r25	; 0x20
    1c32:	8f 8f       	std	Y+31, r24	; 0x1f
    1c34:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c36:	98 a1       	ldd	r25, Y+32	; 0x20
    1c38:	01 97       	sbiw	r24, 0x01	; 1
    1c3a:	f1 f7       	brne	.-4      	; 0x1c38 <LCD_displayCharacter+0x1ba>
    1c3c:	98 a3       	std	Y+32, r25	; 0x20
    1c3e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c40:	89 a1       	ldd	r24, Y+33	; 0x21
    1c42:	9a a1       	ldd	r25, Y+34	; 0x22
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	9a a3       	std	Y+34, r25	; 0x22
    1c48:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c4a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c4c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c4e:	00 97       	sbiw	r24, 0x00	; 0
    1c50:	69 f7       	brne	.-38     	; 0x1c2c <LCD_displayCharacter+0x1ae>
    1c52:	14 c0       	rjmp	.+40     	; 0x1c7c <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c54:	6b a1       	ldd	r22, Y+35	; 0x23
    1c56:	7c a1       	ldd	r23, Y+36	; 0x24
    1c58:	8d a1       	ldd	r24, Y+37	; 0x25
    1c5a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	9a a3       	std	Y+34, r25	; 0x22
    1c66:	89 a3       	std	Y+33, r24	; 0x21
    1c68:	89 a1       	ldd	r24, Y+33	; 0x21
    1c6a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c6c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c6e:	8d 8f       	std	Y+29, r24	; 0x1d
    1c70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c72:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	f1 f7       	brne	.-4      	; 0x1c74 <LCD_displayCharacter+0x1f6>
    1c78:	9e 8f       	std	Y+30, r25	; 0x1e
    1c7a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    1c7c:	82 e0       	ldi	r24, 0x02	; 2
    1c7e:	6a ad       	ldd	r22, Y+58	; 0x3a
    1c80:	0e 94 a6 09 	call	0x134c	; 0x134c <GPIO_writePort>
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	a0 e8       	ldi	r26, 0x80	; 128
    1c8a:	bf e3       	ldi	r27, 0x3F	; 63
    1c8c:	89 8f       	std	Y+25, r24	; 0x19
    1c8e:	9a 8f       	std	Y+26, r25	; 0x1a
    1c90:	ab 8f       	std	Y+27, r26	; 0x1b
    1c92:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c94:	69 8d       	ldd	r22, Y+25	; 0x19
    1c96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	4a e7       	ldi	r20, 0x7A	; 122
    1ca2:	53 e4       	ldi	r21, 0x43	; 67
    1ca4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	8d 8b       	std	Y+21, r24	; 0x15
    1cae:	9e 8b       	std	Y+22, r25	; 0x16
    1cb0:	af 8b       	std	Y+23, r26	; 0x17
    1cb2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cb4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cba:	98 8d       	ldd	r25, Y+24	; 0x18
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	40 e8       	ldi	r20, 0x80	; 128
    1cc2:	5f e3       	ldi	r21, 0x3F	; 63
    1cc4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cc8:	88 23       	and	r24, r24
    1cca:	2c f4       	brge	.+10     	; 0x1cd6 <LCD_displayCharacter+0x258>
		__ticks = 1;
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	9c 8b       	std	Y+20, r25	; 0x14
    1cd2:	8b 8b       	std	Y+19, r24	; 0x13
    1cd4:	3f c0       	rjmp	.+126    	; 0x1d54 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    1cd6:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cda:	8f 89       	ldd	r24, Y+23	; 0x17
    1cdc:	98 8d       	ldd	r25, Y+24	; 0x18
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	3f ef       	ldi	r19, 0xFF	; 255
    1ce2:	4f e7       	ldi	r20, 0x7F	; 127
    1ce4:	57 e4       	ldi	r21, 0x47	; 71
    1ce6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cea:	18 16       	cp	r1, r24
    1cec:	4c f5       	brge	.+82     	; 0x1d40 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cee:	69 8d       	ldd	r22, Y+25	; 0x19
    1cf0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e2       	ldi	r20, 0x20	; 32
    1cfc:	51 e4       	ldi	r21, 0x41	; 65
    1cfe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	bc 01       	movw	r22, r24
    1d08:	cd 01       	movw	r24, r26
    1d0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	9c 8b       	std	Y+20, r25	; 0x14
    1d14:	8b 8b       	std	Y+19, r24	; 0x13
    1d16:	0f c0       	rjmp	.+30     	; 0x1d36 <LCD_displayCharacter+0x2b8>
    1d18:	89 e1       	ldi	r24, 0x19	; 25
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	9a 8b       	std	Y+18, r25	; 0x12
    1d1e:	89 8b       	std	Y+17, r24	; 0x11
    1d20:	89 89       	ldd	r24, Y+17	; 0x11
    1d22:	9a 89       	ldd	r25, Y+18	; 0x12
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	f1 f7       	brne	.-4      	; 0x1d24 <LCD_displayCharacter+0x2a6>
    1d28:	9a 8b       	std	Y+18, r25	; 0x12
    1d2a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	9c 8b       	std	Y+20, r25	; 0x14
    1d34:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d36:	8b 89       	ldd	r24, Y+19	; 0x13
    1d38:	9c 89       	ldd	r25, Y+20	; 0x14
    1d3a:	00 97       	sbiw	r24, 0x00	; 0
    1d3c:	69 f7       	brne	.-38     	; 0x1d18 <LCD_displayCharacter+0x29a>
    1d3e:	14 c0       	rjmp	.+40     	; 0x1d68 <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d40:	6d 89       	ldd	r22, Y+21	; 0x15
    1d42:	7e 89       	ldd	r23, Y+22	; 0x16
    1d44:	8f 89       	ldd	r24, Y+23	; 0x17
    1d46:	98 8d       	ldd	r25, Y+24	; 0x18
    1d48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	9c 8b       	std	Y+20, r25	; 0x14
    1d52:	8b 8b       	std	Y+19, r24	; 0x13
    1d54:	8b 89       	ldd	r24, Y+19	; 0x13
    1d56:	9c 89       	ldd	r25, Y+20	; 0x14
    1d58:	98 8b       	std	Y+16, r25	; 0x10
    1d5a:	8f 87       	std	Y+15, r24	; 0x0f
    1d5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d5e:	98 89       	ldd	r25, Y+16	; 0x10
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	f1 f7       	brne	.-4      	; 0x1d60 <LCD_displayCharacter+0x2e2>
    1d64:	98 8b       	std	Y+16, r25	; 0x10
    1d66:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1d68:	83 e0       	ldi	r24, 0x03	; 3
    1d6a:	66 e0       	ldi	r22, 0x06	; 6
    1d6c:	40 e0       	ldi	r20, 0x00	; 0
    1d6e:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <GPIO_writePin>
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	a0 e8       	ldi	r26, 0x80	; 128
    1d78:	bf e3       	ldi	r27, 0x3F	; 63
    1d7a:	8b 87       	std	Y+11, r24	; 0x0b
    1d7c:	9c 87       	std	Y+12, r25	; 0x0c
    1d7e:	ad 87       	std	Y+13, r26	; 0x0d
    1d80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	4a e7       	ldi	r20, 0x7A	; 122
    1d90:	53 e4       	ldi	r21, 0x43	; 67
    1d92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	8f 83       	std	Y+7, r24	; 0x07
    1d9c:	98 87       	std	Y+8, r25	; 0x08
    1d9e:	a9 87       	std	Y+9, r26	; 0x09
    1da0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1da2:	6f 81       	ldd	r22, Y+7	; 0x07
    1da4:	78 85       	ldd	r23, Y+8	; 0x08
    1da6:	89 85       	ldd	r24, Y+9	; 0x09
    1da8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	40 e8       	ldi	r20, 0x80	; 128
    1db0:	5f e3       	ldi	r21, 0x3F	; 63
    1db2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1db6:	88 23       	and	r24, r24
    1db8:	2c f4       	brge	.+10     	; 0x1dc4 <LCD_displayCharacter+0x346>
		__ticks = 1;
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	9e 83       	std	Y+6, r25	; 0x06
    1dc0:	8d 83       	std	Y+5, r24	; 0x05
    1dc2:	3f c0       	rjmp	.+126    	; 0x1e42 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    1dc4:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc6:	78 85       	ldd	r23, Y+8	; 0x08
    1dc8:	89 85       	ldd	r24, Y+9	; 0x09
    1dca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	3f ef       	ldi	r19, 0xFF	; 255
    1dd0:	4f e7       	ldi	r20, 0x7F	; 127
    1dd2:	57 e4       	ldi	r21, 0x47	; 71
    1dd4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dd8:	18 16       	cp	r1, r24
    1dda:	4c f5       	brge	.+82     	; 0x1e2e <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ddc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dde:	7c 85       	ldd	r23, Y+12	; 0x0c
    1de0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	40 e2       	ldi	r20, 0x20	; 32
    1dea:	51 e4       	ldi	r21, 0x41	; 65
    1dec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	bc 01       	movw	r22, r24
    1df6:	cd 01       	movw	r24, r26
    1df8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	9e 83       	std	Y+6, r25	; 0x06
    1e02:	8d 83       	std	Y+5, r24	; 0x05
    1e04:	0f c0       	rjmp	.+30     	; 0x1e24 <LCD_displayCharacter+0x3a6>
    1e06:	89 e1       	ldi	r24, 0x19	; 25
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	9c 83       	std	Y+4, r25	; 0x04
    1e0c:	8b 83       	std	Y+3, r24	; 0x03
    1e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e10:	9c 81       	ldd	r25, Y+4	; 0x04
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	f1 f7       	brne	.-4      	; 0x1e12 <LCD_displayCharacter+0x394>
    1e16:	9c 83       	std	Y+4, r25	; 0x04
    1e18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	9e 83       	std	Y+6, r25	; 0x06
    1e22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e24:	8d 81       	ldd	r24, Y+5	; 0x05
    1e26:	9e 81       	ldd	r25, Y+6	; 0x06
    1e28:	00 97       	sbiw	r24, 0x00	; 0
    1e2a:	69 f7       	brne	.-38     	; 0x1e06 <LCD_displayCharacter+0x388>
    1e2c:	14 c0       	rjmp	.+40     	; 0x1e56 <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e30:	78 85       	ldd	r23, Y+8	; 0x08
    1e32:	89 85       	ldd	r24, Y+9	; 0x09
    1e34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	9e 83       	std	Y+6, r25	; 0x06
    1e40:	8d 83       	std	Y+5, r24	; 0x05
    1e42:	8d 81       	ldd	r24, Y+5	; 0x05
    1e44:	9e 81       	ldd	r25, Y+6	; 0x06
    1e46:	9a 83       	std	Y+2, r25	; 0x02
    1e48:	89 83       	std	Y+1, r24	; 0x01
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	f1 f7       	brne	.-4      	; 0x1e4e <LCD_displayCharacter+0x3d0>
    1e52:	9a 83       	std	Y+2, r25	; 0x02
    1e54:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1e56:	ea 96       	adiw	r28, 0x3a	; 58
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	08 95       	ret

00001e68 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	00 d0       	rcall	.+0      	; 0x1e6e <LCD_displayString+0x6>
    1e6e:	0f 92       	push	r0
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
    1e74:	9b 83       	std	Y+3, r25	; 0x03
    1e76:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e78:	19 82       	std	Y+1, r1	; 0x01
    1e7a:	0e c0       	rjmp	.+28     	; 0x1e98 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	28 2f       	mov	r18, r24
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	8a 81       	ldd	r24, Y+2	; 0x02
    1e84:	9b 81       	ldd	r25, Y+3	; 0x03
    1e86:	fc 01       	movw	r30, r24
    1e88:	e2 0f       	add	r30, r18
    1e8a:	f3 1f       	adc	r31, r19
    1e8c:	80 81       	ld	r24, Z
    1e8e:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <LCD_displayCharacter>
		i++;
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	8f 5f       	subi	r24, 0xFF	; 255
    1e96:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	28 2f       	mov	r18, r24
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	e2 0f       	add	r30, r18
    1ea6:	f3 1f       	adc	r31, r19
    1ea8:	80 81       	ld	r24, Z
    1eaa:	88 23       	and	r24, r24
    1eac:	39 f7       	brne	.-50     	; 0x1e7c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <LCD_moveCursor+0x6>
    1ec0:	00 d0       	rcall	.+0      	; 0x1ec2 <LCD_moveCursor+0x8>
    1ec2:	0f 92       	push	r0
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
    1ec8:	8a 83       	std	Y+2, r24	; 0x02
    1eca:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ece:	28 2f       	mov	r18, r24
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	3d 83       	std	Y+5, r19	; 0x05
    1ed4:	2c 83       	std	Y+4, r18	; 0x04
    1ed6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eda:	81 30       	cpi	r24, 0x01	; 1
    1edc:	91 05       	cpc	r25, r1
    1ede:	c1 f0       	breq	.+48     	; 0x1f10 <LCD_moveCursor+0x56>
    1ee0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ee2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ee4:	22 30       	cpi	r18, 0x02	; 2
    1ee6:	31 05       	cpc	r19, r1
    1ee8:	2c f4       	brge	.+10     	; 0x1ef4 <LCD_moveCursor+0x3a>
    1eea:	8c 81       	ldd	r24, Y+4	; 0x04
    1eec:	9d 81       	ldd	r25, Y+5	; 0x05
    1eee:	00 97       	sbiw	r24, 0x00	; 0
    1ef0:	61 f0       	breq	.+24     	; 0x1f0a <LCD_moveCursor+0x50>
    1ef2:	19 c0       	rjmp	.+50     	; 0x1f26 <LCD_moveCursor+0x6c>
    1ef4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ef6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ef8:	22 30       	cpi	r18, 0x02	; 2
    1efa:	31 05       	cpc	r19, r1
    1efc:	69 f0       	breq	.+26     	; 0x1f18 <LCD_moveCursor+0x5e>
    1efe:	8c 81       	ldd	r24, Y+4	; 0x04
    1f00:	9d 81       	ldd	r25, Y+5	; 0x05
    1f02:	83 30       	cpi	r24, 0x03	; 3
    1f04:	91 05       	cpc	r25, r1
    1f06:	61 f0       	breq	.+24     	; 0x1f20 <LCD_moveCursor+0x66>
    1f08:	0e c0       	rjmp	.+28     	; 0x1f26 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0c:	89 83       	std	Y+1, r24	; 0x01
    1f0e:	0b c0       	rjmp	.+22     	; 0x1f26 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	80 5c       	subi	r24, 0xC0	; 192
    1f14:	89 83       	std	Y+1, r24	; 0x01
    1f16:	07 c0       	rjmp	.+14     	; 0x1f26 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	80 5f       	subi	r24, 0xF0	; 240
    1f1c:	89 83       	std	Y+1, r24	; 0x01
    1f1e:	03 c0       	rjmp	.+6      	; 0x1f26 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	80 5b       	subi	r24, 0xB0	; 176
    1f24:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	80 68       	ori	r24, 0x80	; 128
    1f2a:	0e 94 4a 0b 	call	0x1694	; 0x1694 <LCD_sendCommand>
}
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	08 95       	ret

00001f3e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1f3e:	df 93       	push	r29
    1f40:	cf 93       	push	r28
    1f42:	00 d0       	rcall	.+0      	; 0x1f44 <LCD_displayStringRowColumn+0x6>
    1f44:	00 d0       	rcall	.+0      	; 0x1f46 <LCD_displayStringRowColumn+0x8>
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
    1f4a:	89 83       	std	Y+1, r24	; 0x01
    1f4c:	6a 83       	std	Y+2, r22	; 0x02
    1f4e:	5c 83       	std	Y+4, r21	; 0x04
    1f50:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	6a 81       	ldd	r22, Y+2	; 0x02
    1f56:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_displayString>
}
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	cf 91       	pop	r28
    1f6c:	df 91       	pop	r29
    1f6e:	08 95       	ret

00001f70 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1f70:	df 93       	push	r29
    1f72:	cf 93       	push	r28
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	62 97       	sbiw	r28, 0x12	; 18
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	f8 94       	cli
    1f7e:	de bf       	out	0x3e, r29	; 62
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	cd bf       	out	0x3d, r28	; 61
    1f84:	9a 8b       	std	Y+18, r25	; 0x12
    1f86:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1f88:	89 89       	ldd	r24, Y+17	; 0x11
    1f8a:	9a 89       	ldd	r25, Y+18	; 0x12
    1f8c:	9e 01       	movw	r18, r28
    1f8e:	2f 5f       	subi	r18, 0xFF	; 255
    1f90:	3f 4f       	sbci	r19, 0xFF	; 255
    1f92:	b9 01       	movw	r22, r18
    1f94:	4a e0       	ldi	r20, 0x0A	; 10
    1f96:	50 e0       	ldi	r21, 0x00	; 0
    1f98:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <itoa>
   LCD_displayString(buff); /* Display the string */
    1f9c:	ce 01       	movw	r24, r28
    1f9e:	01 96       	adiw	r24, 0x01	; 1
    1fa0:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_displayString>
}
    1fa4:	62 96       	adiw	r28, 0x12	; 18
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	0e 94 4a 0b 	call	0x1694	; 0x1694 <LCD_sendCommand>
}
    1fc4:	cf 91       	pop	r28
    1fc6:	df 91       	pop	r29
    1fc8:	08 95       	ret

00001fca <PASSWORD_getPassword>:
#include"std_types.h"



uint16 PASSWORD_getPassword()
{
    1fca:	df 93       	push	r29
    1fcc:	cf 93       	push	r28
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    1fd2:	a0 97       	sbiw	r28, 0x20	; 32
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
	uint8 i , temp ;
	uint16 pass=0;
    1fde:	1e 8e       	std	Y+30, r1	; 0x1e
    1fe0:	1d 8e       	std	Y+29, r1	; 0x1d

	LCD_clearScreen();
    1fe2:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	60 e0       	ldi	r22, 0x00	; 0
    1fea:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_moveCursor>
	LCD_displayString("Enter Password:");
    1fee:	86 eb       	ldi	r24, 0xB6	; 182
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_displayString>

	LCD_moveCursor(1, 0);
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	60 e0       	ldi	r22, 0x00	; 0
    1ffa:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_moveCursor>
	for(i=0;i<4;i++)
    1ffe:	18 a2       	std	Y+32, r1	; 0x20
    2000:	91 c0       	rjmp	.+290    	; 0x2124 <PASSWORD_getPassword+0x15a>
	{
		temp= KEYPAD_getPressedKey();
    2002:	0e 94 2f 0a 	call	0x145e	; 0x145e <KEYPAD_getPressedKey>
    2006:	8f 8f       	std	Y+31, r24	; 0x1f
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	90 e8       	ldi	r25, 0x80	; 128
    200c:	ab eb       	ldi	r26, 0xBB	; 187
    200e:	b4 e4       	ldi	r27, 0x44	; 68
    2010:	89 8f       	std	Y+25, r24	; 0x19
    2012:	9a 8f       	std	Y+26, r25	; 0x1a
    2014:	ab 8f       	std	Y+27, r26	; 0x1b
    2016:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2018:	69 8d       	ldd	r22, Y+25	; 0x19
    201a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    201c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    201e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	4a e7       	ldi	r20, 0x7A	; 122
    2026:	53 e4       	ldi	r21, 0x43	; 67
    2028:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	8d 8b       	std	Y+21, r24	; 0x15
    2032:	9e 8b       	std	Y+22, r25	; 0x16
    2034:	af 8b       	std	Y+23, r26	; 0x17
    2036:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2038:	6d 89       	ldd	r22, Y+21	; 0x15
    203a:	7e 89       	ldd	r23, Y+22	; 0x16
    203c:	8f 89       	ldd	r24, Y+23	; 0x17
    203e:	98 8d       	ldd	r25, Y+24	; 0x18
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	40 e8       	ldi	r20, 0x80	; 128
    2046:	5f e3       	ldi	r21, 0x3F	; 63
    2048:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    204c:	88 23       	and	r24, r24
    204e:	2c f4       	brge	.+10     	; 0x205a <PASSWORD_getPassword+0x90>
		__ticks = 1;
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	9c 8b       	std	Y+20, r25	; 0x14
    2056:	8b 8b       	std	Y+19, r24	; 0x13
    2058:	3f c0       	rjmp	.+126    	; 0x20d8 <PASSWORD_getPassword+0x10e>
	else if (__tmp > 65535)
    205a:	6d 89       	ldd	r22, Y+21	; 0x15
    205c:	7e 89       	ldd	r23, Y+22	; 0x16
    205e:	8f 89       	ldd	r24, Y+23	; 0x17
    2060:	98 8d       	ldd	r25, Y+24	; 0x18
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	3f ef       	ldi	r19, 0xFF	; 255
    2066:	4f e7       	ldi	r20, 0x7F	; 127
    2068:	57 e4       	ldi	r21, 0x47	; 71
    206a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    206e:	18 16       	cp	r1, r24
    2070:	4c f5       	brge	.+82     	; 0x20c4 <PASSWORD_getPassword+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2072:	69 8d       	ldd	r22, Y+25	; 0x19
    2074:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2076:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2078:	9c 8d       	ldd	r25, Y+28	; 0x1c
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e2       	ldi	r20, 0x20	; 32
    2080:	51 e4       	ldi	r21, 0x41	; 65
    2082:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	bc 01       	movw	r22, r24
    208c:	cd 01       	movw	r24, r26
    208e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	9c 8b       	std	Y+20, r25	; 0x14
    2098:	8b 8b       	std	Y+19, r24	; 0x13
    209a:	0f c0       	rjmp	.+30     	; 0x20ba <PASSWORD_getPassword+0xf0>
    209c:	89 e1       	ldi	r24, 0x19	; 25
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	9a 8b       	std	Y+18, r25	; 0x12
    20a2:	89 8b       	std	Y+17, r24	; 0x11
    20a4:	89 89       	ldd	r24, Y+17	; 0x11
    20a6:	9a 89       	ldd	r25, Y+18	; 0x12
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <PASSWORD_getPassword+0xde>
    20ac:	9a 8b       	std	Y+18, r25	; 0x12
    20ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b0:	8b 89       	ldd	r24, Y+19	; 0x13
    20b2:	9c 89       	ldd	r25, Y+20	; 0x14
    20b4:	01 97       	sbiw	r24, 0x01	; 1
    20b6:	9c 8b       	std	Y+20, r25	; 0x14
    20b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ba:	8b 89       	ldd	r24, Y+19	; 0x13
    20bc:	9c 89       	ldd	r25, Y+20	; 0x14
    20be:	00 97       	sbiw	r24, 0x00	; 0
    20c0:	69 f7       	brne	.-38     	; 0x209c <PASSWORD_getPassword+0xd2>
    20c2:	14 c0       	rjmp	.+40     	; 0x20ec <PASSWORD_getPassword+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c4:	6d 89       	ldd	r22, Y+21	; 0x15
    20c6:	7e 89       	ldd	r23, Y+22	; 0x16
    20c8:	8f 89       	ldd	r24, Y+23	; 0x17
    20ca:	98 8d       	ldd	r25, Y+24	; 0x18
    20cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	9c 8b       	std	Y+20, r25	; 0x14
    20d6:	8b 8b       	std	Y+19, r24	; 0x13
    20d8:	8b 89       	ldd	r24, Y+19	; 0x13
    20da:	9c 89       	ldd	r25, Y+20	; 0x14
    20dc:	98 8b       	std	Y+16, r25	; 0x10
    20de:	8f 87       	std	Y+15, r24	; 0x0f
    20e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    20e2:	98 89       	ldd	r25, Y+16	; 0x10
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	f1 f7       	brne	.-4      	; 0x20e4 <PASSWORD_getPassword+0x11a>
    20e8:	98 8b       	std	Y+16, r25	; 0x10
    20ea:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1500);
		if(temp>=0 && temp<=9)
    20ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20ee:	8a 30       	cpi	r24, 0x0A	; 10
    20f0:	b0 f4       	brcc	.+44     	; 0x211e <PASSWORD_getPassword+0x154>
		{
			LCD_displayCharacter('*');
    20f2:	8a e2       	ldi	r24, 0x2A	; 42
    20f4:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <LCD_displayCharacter>
			pass= pass * 10 +temp;
    20f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20fc:	9c 01       	movw	r18, r24
    20fe:	22 0f       	add	r18, r18
    2100:	33 1f       	adc	r19, r19
    2102:	c9 01       	movw	r24, r18
    2104:	88 0f       	add	r24, r24
    2106:	99 1f       	adc	r25, r25
    2108:	88 0f       	add	r24, r24
    210a:	99 1f       	adc	r25, r25
    210c:	28 0f       	add	r18, r24
    210e:	39 1f       	adc	r19, r25
    2110:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2112:	88 2f       	mov	r24, r24
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	82 0f       	add	r24, r18
    2118:	93 1f       	adc	r25, r19
    211a:	9e 8f       	std	Y+30, r25	; 0x1e
    211c:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_clearScreen();
	LCD_moveCursor(0, 0);
	LCD_displayString("Enter Password:");

	LCD_moveCursor(1, 0);
	for(i=0;i<4;i++)
    211e:	88 a1       	ldd	r24, Y+32	; 0x20
    2120:	8f 5f       	subi	r24, 0xFF	; 255
    2122:	88 a3       	std	Y+32, r24	; 0x20
    2124:	88 a1       	ldd	r24, Y+32	; 0x20
    2126:	84 30       	cpi	r24, 0x04	; 4
    2128:	08 f4       	brcc	.+2      	; 0x212c <PASSWORD_getPassword+0x162>
    212a:	6b cf       	rjmp	.-298    	; 0x2002 <PASSWORD_getPassword+0x38>
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	aa e7       	ldi	r26, 0x7A	; 122
    2132:	b4 e4       	ldi	r27, 0x44	; 68
    2134:	8b 87       	std	Y+11, r24	; 0x0b
    2136:	9c 87       	std	Y+12, r25	; 0x0c
    2138:	ad 87       	std	Y+13, r26	; 0x0d
    213a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213c:	6b 85       	ldd	r22, Y+11	; 0x0b
    213e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2140:	8d 85       	ldd	r24, Y+13	; 0x0d
    2142:	9e 85       	ldd	r25, Y+14	; 0x0e
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	4a e7       	ldi	r20, 0x7A	; 122
    214a:	53 e4       	ldi	r21, 0x43	; 67
    214c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	8f 83       	std	Y+7, r24	; 0x07
    2156:	98 87       	std	Y+8, r25	; 0x08
    2158:	a9 87       	std	Y+9, r26	; 0x09
    215a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    215c:	6f 81       	ldd	r22, Y+7	; 0x07
    215e:	78 85       	ldd	r23, Y+8	; 0x08
    2160:	89 85       	ldd	r24, Y+9	; 0x09
    2162:	9a 85       	ldd	r25, Y+10	; 0x0a
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	40 e8       	ldi	r20, 0x80	; 128
    216a:	5f e3       	ldi	r21, 0x3F	; 63
    216c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2170:	88 23       	and	r24, r24
    2172:	2c f4       	brge	.+10     	; 0x217e <PASSWORD_getPassword+0x1b4>
		__ticks = 1;
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	9e 83       	std	Y+6, r25	; 0x06
    217a:	8d 83       	std	Y+5, r24	; 0x05
    217c:	3f c0       	rjmp	.+126    	; 0x21fc <PASSWORD_getPassword+0x232>
	else if (__tmp > 65535)
    217e:	6f 81       	ldd	r22, Y+7	; 0x07
    2180:	78 85       	ldd	r23, Y+8	; 0x08
    2182:	89 85       	ldd	r24, Y+9	; 0x09
    2184:	9a 85       	ldd	r25, Y+10	; 0x0a
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	3f ef       	ldi	r19, 0xFF	; 255
    218a:	4f e7       	ldi	r20, 0x7F	; 127
    218c:	57 e4       	ldi	r21, 0x47	; 71
    218e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2192:	18 16       	cp	r1, r24
    2194:	4c f5       	brge	.+82     	; 0x21e8 <PASSWORD_getPassword+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2196:	6b 85       	ldd	r22, Y+11	; 0x0b
    2198:	7c 85       	ldd	r23, Y+12	; 0x0c
    219a:	8d 85       	ldd	r24, Y+13	; 0x0d
    219c:	9e 85       	ldd	r25, Y+14	; 0x0e
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	40 e2       	ldi	r20, 0x20	; 32
    21a4:	51 e4       	ldi	r21, 0x41	; 65
    21a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	bc 01       	movw	r22, r24
    21b0:	cd 01       	movw	r24, r26
    21b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	9e 83       	std	Y+6, r25	; 0x06
    21bc:	8d 83       	std	Y+5, r24	; 0x05
    21be:	0f c0       	rjmp	.+30     	; 0x21de <PASSWORD_getPassword+0x214>
    21c0:	89 e1       	ldi	r24, 0x19	; 25
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	9c 83       	std	Y+4, r25	; 0x04
    21c6:	8b 83       	std	Y+3, r24	; 0x03
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	9c 81       	ldd	r25, Y+4	; 0x04
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	f1 f7       	brne	.-4      	; 0x21cc <PASSWORD_getPassword+0x202>
    21d0:	9c 83       	std	Y+4, r25	; 0x04
    21d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d4:	8d 81       	ldd	r24, Y+5	; 0x05
    21d6:	9e 81       	ldd	r25, Y+6	; 0x06
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	9e 83       	std	Y+6, r25	; 0x06
    21dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21de:	8d 81       	ldd	r24, Y+5	; 0x05
    21e0:	9e 81       	ldd	r25, Y+6	; 0x06
    21e2:	00 97       	sbiw	r24, 0x00	; 0
    21e4:	69 f7       	brne	.-38     	; 0x21c0 <PASSWORD_getPassword+0x1f6>
    21e6:	14 c0       	rjmp	.+40     	; 0x2210 <PASSWORD_getPassword+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e8:	6f 81       	ldd	r22, Y+7	; 0x07
    21ea:	78 85       	ldd	r23, Y+8	; 0x08
    21ec:	89 85       	ldd	r24, Y+9	; 0x09
    21ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	9e 83       	std	Y+6, r25	; 0x06
    21fa:	8d 83       	std	Y+5, r24	; 0x05
    21fc:	8d 81       	ldd	r24, Y+5	; 0x05
    21fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2200:	9a 83       	std	Y+2, r25	; 0x02
    2202:	89 83       	std	Y+1, r24	; 0x01
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	9a 81       	ldd	r25, Y+2	; 0x02
    2208:	01 97       	sbiw	r24, 0x01	; 1
    220a:	f1 f7       	brne	.-4      	; 0x2208 <PASSWORD_getPassword+0x23e>
    220c:	9a 83       	std	Y+2, r25	; 0x02
    220e:	89 83       	std	Y+1, r24	; 0x01
			LCD_displayCharacter('*');
			pass= pass * 10 +temp;
		}
	}
	_delay_ms(1000);
	return pass;
    2210:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2212:	9e 8d       	ldd	r25, Y+30	; 0x1e
}
    2214:	a0 96       	adiw	r28, 0x20	; 32
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	de bf       	out	0x3e, r29	; 62
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	cd bf       	out	0x3d, r28	; 61
    2220:	cf 91       	pop	r28
    2222:	df 91       	pop	r29
    2224:	08 95       	ret

00002226 <PASSWORD_checkPassword>:

static uint16 PASSWORD_checkPassword()
{
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	cd b7       	in	r28, 0x3d	; 61
    222c:	de b7       	in	r29, 0x3e	; 62
    222e:	a0 97       	sbiw	r28, 0x20	; 32
    2230:	0f b6       	in	r0, 0x3f	; 63
    2232:	f8 94       	cli
    2234:	de bf       	out	0x3e, r29	; 62
    2236:	0f be       	out	0x3f, r0	; 63
    2238:	cd bf       	out	0x3d, r28	; 61
	uint8 i , temp ;
	uint16 pass=0;
    223a:	1e 8e       	std	Y+30, r1	; 0x1e
    223c:	1d 8e       	std	Y+29, r1	; 0x1d

	LCD_clearScreen();
    223e:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	60 e0       	ldi	r22, 0x00	; 0
    2246:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_moveCursor>
	LCD_displayString("Re-Enter Pass:");
    224a:	86 ec       	ldi	r24, 0xC6	; 198
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_displayString>

	LCD_moveCursor(1, 0);
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	60 e0       	ldi	r22, 0x00	; 0
    2256:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_moveCursor>

	for(i=0;i<4;i++)
    225a:	18 a2       	std	Y+32, r1	; 0x20
    225c:	91 c0       	rjmp	.+290    	; 0x2380 <PASSWORD_checkPassword+0x15a>
	{
		temp= KEYPAD_getPressedKey();
    225e:	0e 94 2f 0a 	call	0x145e	; 0x145e <KEYPAD_getPressedKey>
    2262:	8f 8f       	std	Y+31, r24	; 0x1f
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	90 e8       	ldi	r25, 0x80	; 128
    2268:	ab eb       	ldi	r26, 0xBB	; 187
    226a:	b4 e4       	ldi	r27, 0x44	; 68
    226c:	89 8f       	std	Y+25, r24	; 0x19
    226e:	9a 8f       	std	Y+26, r25	; 0x1a
    2270:	ab 8f       	std	Y+27, r26	; 0x1b
    2272:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2274:	69 8d       	ldd	r22, Y+25	; 0x19
    2276:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2278:	8b 8d       	ldd	r24, Y+27	; 0x1b
    227a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	4a e7       	ldi	r20, 0x7A	; 122
    2282:	53 e4       	ldi	r21, 0x43	; 67
    2284:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	8d 8b       	std	Y+21, r24	; 0x15
    228e:	9e 8b       	std	Y+22, r25	; 0x16
    2290:	af 8b       	std	Y+23, r26	; 0x17
    2292:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2294:	6d 89       	ldd	r22, Y+21	; 0x15
    2296:	7e 89       	ldd	r23, Y+22	; 0x16
    2298:	8f 89       	ldd	r24, Y+23	; 0x17
    229a:	98 8d       	ldd	r25, Y+24	; 0x18
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	40 e8       	ldi	r20, 0x80	; 128
    22a2:	5f e3       	ldi	r21, 0x3F	; 63
    22a4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22a8:	88 23       	and	r24, r24
    22aa:	2c f4       	brge	.+10     	; 0x22b6 <PASSWORD_checkPassword+0x90>
		__ticks = 1;
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	9c 8b       	std	Y+20, r25	; 0x14
    22b2:	8b 8b       	std	Y+19, r24	; 0x13
    22b4:	3f c0       	rjmp	.+126    	; 0x2334 <PASSWORD_checkPassword+0x10e>
	else if (__tmp > 65535)
    22b6:	6d 89       	ldd	r22, Y+21	; 0x15
    22b8:	7e 89       	ldd	r23, Y+22	; 0x16
    22ba:	8f 89       	ldd	r24, Y+23	; 0x17
    22bc:	98 8d       	ldd	r25, Y+24	; 0x18
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	3f ef       	ldi	r19, 0xFF	; 255
    22c2:	4f e7       	ldi	r20, 0x7F	; 127
    22c4:	57 e4       	ldi	r21, 0x47	; 71
    22c6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22ca:	18 16       	cp	r1, r24
    22cc:	4c f5       	brge	.+82     	; 0x2320 <PASSWORD_checkPassword+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ce:	69 8d       	ldd	r22, Y+25	; 0x19
    22d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	40 e2       	ldi	r20, 0x20	; 32
    22dc:	51 e4       	ldi	r21, 0x41	; 65
    22de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	bc 01       	movw	r22, r24
    22e8:	cd 01       	movw	r24, r26
    22ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	9c 8b       	std	Y+20, r25	; 0x14
    22f4:	8b 8b       	std	Y+19, r24	; 0x13
    22f6:	0f c0       	rjmp	.+30     	; 0x2316 <PASSWORD_checkPassword+0xf0>
    22f8:	89 e1       	ldi	r24, 0x19	; 25
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	9a 8b       	std	Y+18, r25	; 0x12
    22fe:	89 8b       	std	Y+17, r24	; 0x11
    2300:	89 89       	ldd	r24, Y+17	; 0x11
    2302:	9a 89       	ldd	r25, Y+18	; 0x12
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	f1 f7       	brne	.-4      	; 0x2304 <PASSWORD_checkPassword+0xde>
    2308:	9a 8b       	std	Y+18, r25	; 0x12
    230a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230c:	8b 89       	ldd	r24, Y+19	; 0x13
    230e:	9c 89       	ldd	r25, Y+20	; 0x14
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	9c 8b       	std	Y+20, r25	; 0x14
    2314:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2316:	8b 89       	ldd	r24, Y+19	; 0x13
    2318:	9c 89       	ldd	r25, Y+20	; 0x14
    231a:	00 97       	sbiw	r24, 0x00	; 0
    231c:	69 f7       	brne	.-38     	; 0x22f8 <PASSWORD_checkPassword+0xd2>
    231e:	14 c0       	rjmp	.+40     	; 0x2348 <PASSWORD_checkPassword+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2320:	6d 89       	ldd	r22, Y+21	; 0x15
    2322:	7e 89       	ldd	r23, Y+22	; 0x16
    2324:	8f 89       	ldd	r24, Y+23	; 0x17
    2326:	98 8d       	ldd	r25, Y+24	; 0x18
    2328:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	9c 8b       	std	Y+20, r25	; 0x14
    2332:	8b 8b       	std	Y+19, r24	; 0x13
    2334:	8b 89       	ldd	r24, Y+19	; 0x13
    2336:	9c 89       	ldd	r25, Y+20	; 0x14
    2338:	98 8b       	std	Y+16, r25	; 0x10
    233a:	8f 87       	std	Y+15, r24	; 0x0f
    233c:	8f 85       	ldd	r24, Y+15	; 0x0f
    233e:	98 89       	ldd	r25, Y+16	; 0x10
    2340:	01 97       	sbiw	r24, 0x01	; 1
    2342:	f1 f7       	brne	.-4      	; 0x2340 <PASSWORD_checkPassword+0x11a>
    2344:	98 8b       	std	Y+16, r25	; 0x10
    2346:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1500);
		if(temp>=0&&temp<=9)
    2348:	8f 8d       	ldd	r24, Y+31	; 0x1f
    234a:	8a 30       	cpi	r24, 0x0A	; 10
    234c:	b0 f4       	brcc	.+44     	; 0x237a <PASSWORD_checkPassword+0x154>
		{
			LCD_displayCharacter('*');
    234e:	8a e2       	ldi	r24, 0x2A	; 42
    2350:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <LCD_displayCharacter>
			pass= pass * 10 +temp;
    2354:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2356:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2358:	9c 01       	movw	r18, r24
    235a:	22 0f       	add	r18, r18
    235c:	33 1f       	adc	r19, r19
    235e:	c9 01       	movw	r24, r18
    2360:	88 0f       	add	r24, r24
    2362:	99 1f       	adc	r25, r25
    2364:	88 0f       	add	r24, r24
    2366:	99 1f       	adc	r25, r25
    2368:	28 0f       	add	r18, r24
    236a:	39 1f       	adc	r19, r25
    236c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    236e:	88 2f       	mov	r24, r24
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	82 0f       	add	r24, r18
    2374:	93 1f       	adc	r25, r19
    2376:	9e 8f       	std	Y+30, r25	; 0x1e
    2378:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_moveCursor(0, 0);
	LCD_displayString("Re-Enter Pass:");

	LCD_moveCursor(1, 0);

	for(i=0;i<4;i++)
    237a:	88 a1       	ldd	r24, Y+32	; 0x20
    237c:	8f 5f       	subi	r24, 0xFF	; 255
    237e:	88 a3       	std	Y+32, r24	; 0x20
    2380:	88 a1       	ldd	r24, Y+32	; 0x20
    2382:	84 30       	cpi	r24, 0x04	; 4
    2384:	08 f4       	brcc	.+2      	; 0x2388 <PASSWORD_checkPassword+0x162>
    2386:	6b cf       	rjmp	.-298    	; 0x225e <PASSWORD_checkPassword+0x38>
    2388:	80 e0       	ldi	r24, 0x00	; 0
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	aa e7       	ldi	r26, 0x7A	; 122
    238e:	b4 e4       	ldi	r27, 0x44	; 68
    2390:	8b 87       	std	Y+11, r24	; 0x0b
    2392:	9c 87       	std	Y+12, r25	; 0x0c
    2394:	ad 87       	std	Y+13, r26	; 0x0d
    2396:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2398:	6b 85       	ldd	r22, Y+11	; 0x0b
    239a:	7c 85       	ldd	r23, Y+12	; 0x0c
    239c:	8d 85       	ldd	r24, Y+13	; 0x0d
    239e:	9e 85       	ldd	r25, Y+14	; 0x0e
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	4a e7       	ldi	r20, 0x7A	; 122
    23a6:	53 e4       	ldi	r21, 0x43	; 67
    23a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	8f 83       	std	Y+7, r24	; 0x07
    23b2:	98 87       	std	Y+8, r25	; 0x08
    23b4:	a9 87       	std	Y+9, r26	; 0x09
    23b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23b8:	6f 81       	ldd	r22, Y+7	; 0x07
    23ba:	78 85       	ldd	r23, Y+8	; 0x08
    23bc:	89 85       	ldd	r24, Y+9	; 0x09
    23be:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e8       	ldi	r20, 0x80	; 128
    23c6:	5f e3       	ldi	r21, 0x3F	; 63
    23c8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23cc:	88 23       	and	r24, r24
    23ce:	2c f4       	brge	.+10     	; 0x23da <PASSWORD_checkPassword+0x1b4>
		__ticks = 1;
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	9e 83       	std	Y+6, r25	; 0x06
    23d6:	8d 83       	std	Y+5, r24	; 0x05
    23d8:	3f c0       	rjmp	.+126    	; 0x2458 <PASSWORD_checkPassword+0x232>
	else if (__tmp > 65535)
    23da:	6f 81       	ldd	r22, Y+7	; 0x07
    23dc:	78 85       	ldd	r23, Y+8	; 0x08
    23de:	89 85       	ldd	r24, Y+9	; 0x09
    23e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	3f ef       	ldi	r19, 0xFF	; 255
    23e6:	4f e7       	ldi	r20, 0x7F	; 127
    23e8:	57 e4       	ldi	r21, 0x47	; 71
    23ea:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23ee:	18 16       	cp	r1, r24
    23f0:	4c f5       	brge	.+82     	; 0x2444 <PASSWORD_checkPassword+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    23f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    23f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e2       	ldi	r20, 0x20	; 32
    2400:	51 e4       	ldi	r21, 0x41	; 65
    2402:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	bc 01       	movw	r22, r24
    240c:	cd 01       	movw	r24, r26
    240e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	9e 83       	std	Y+6, r25	; 0x06
    2418:	8d 83       	std	Y+5, r24	; 0x05
    241a:	0f c0       	rjmp	.+30     	; 0x243a <PASSWORD_checkPassword+0x214>
    241c:	89 e1       	ldi	r24, 0x19	; 25
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	9c 83       	std	Y+4, r25	; 0x04
    2422:	8b 83       	std	Y+3, r24	; 0x03
    2424:	8b 81       	ldd	r24, Y+3	; 0x03
    2426:	9c 81       	ldd	r25, Y+4	; 0x04
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	f1 f7       	brne	.-4      	; 0x2428 <PASSWORD_checkPassword+0x202>
    242c:	9c 83       	std	Y+4, r25	; 0x04
    242e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2430:	8d 81       	ldd	r24, Y+5	; 0x05
    2432:	9e 81       	ldd	r25, Y+6	; 0x06
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	9e 83       	std	Y+6, r25	; 0x06
    2438:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243a:	8d 81       	ldd	r24, Y+5	; 0x05
    243c:	9e 81       	ldd	r25, Y+6	; 0x06
    243e:	00 97       	sbiw	r24, 0x00	; 0
    2440:	69 f7       	brne	.-38     	; 0x241c <PASSWORD_checkPassword+0x1f6>
    2442:	14 c0       	rjmp	.+40     	; 0x246c <PASSWORD_checkPassword+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2444:	6f 81       	ldd	r22, Y+7	; 0x07
    2446:	78 85       	ldd	r23, Y+8	; 0x08
    2448:	89 85       	ldd	r24, Y+9	; 0x09
    244a:	9a 85       	ldd	r25, Y+10	; 0x0a
    244c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	9e 83       	std	Y+6, r25	; 0x06
    2456:	8d 83       	std	Y+5, r24	; 0x05
    2458:	8d 81       	ldd	r24, Y+5	; 0x05
    245a:	9e 81       	ldd	r25, Y+6	; 0x06
    245c:	9a 83       	std	Y+2, r25	; 0x02
    245e:	89 83       	std	Y+1, r24	; 0x01
    2460:	89 81       	ldd	r24, Y+1	; 0x01
    2462:	9a 81       	ldd	r25, Y+2	; 0x02
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	f1 f7       	brne	.-4      	; 0x2464 <PASSWORD_checkPassword+0x23e>
    2468:	9a 83       	std	Y+2, r25	; 0x02
    246a:	89 83       	std	Y+1, r24	; 0x01
			LCD_displayCharacter('*');
			pass= pass * 10 +temp;
		}
	}
	_delay_ms(1000);
	return pass;
    246c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    246e:	9e 8d       	ldd	r25, Y+30	; 0x1e

}
    2470:	a0 96       	adiw	r28, 0x20	; 32
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	f8 94       	cli
    2476:	de bf       	out	0x3e, r29	; 62
    2478:	0f be       	out	0x3f, r0	; 63
    247a:	cd bf       	out	0x3d, r28	; 61
    247c:	cf 91       	pop	r28
    247e:	df 91       	pop	r29
    2480:	08 95       	ret

00002482 <PASSWORD_setPassword>:

void  PASSWORD_setPassword()
{
    2482:	df 93       	push	r29
    2484:	cf 93       	push	r28
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
    248a:	a1 97       	sbiw	r28, 0x21	; 33
    248c:	0f b6       	in	r0, 0x3f	; 63
    248e:	f8 94       	cli
    2490:	de bf       	out	0x3e, r29	; 62
    2492:	0f be       	out	0x3f, r0	; 63
    2494:	cd bf       	out	0x3d, r28	; 61
	uint8 valid=TRUE;
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	89 a3       	std	Y+33, r24	; 0x21
	uint16 pass1=0, pass2=0 ;
    249a:	18 a2       	std	Y+32, r1	; 0x20
    249c:	1f 8e       	std	Y+31, r1	; 0x1f
    249e:	1e 8e       	std	Y+30, r1	; 0x1e
    24a0:	1d 8e       	std	Y+29, r1	; 0x1d
    24a2:	8f c0       	rjmp	.+286    	; 0x25c2 <PASSWORD_setPassword+0x140>

	while(valid)
	{
		pass1 = PASSWORD_getPassword();
    24a4:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <PASSWORD_getPassword>
    24a8:	98 a3       	std	Y+32, r25	; 0x20
    24aa:	8f 8f       	std	Y+31, r24	; 0x1f
		pass2 = PASSWORD_checkPassword();
    24ac:	0e 94 13 11 	call	0x2226	; 0x2226 <PASSWORD_checkPassword>
    24b0:	9e 8f       	std	Y+30, r25	; 0x1e
    24b2:	8d 8f       	std	Y+29, r24	; 0x1d

		if(pass1==pass2)
    24b4:	2f 8d       	ldd	r18, Y+31	; 0x1f
    24b6:	38 a1       	ldd	r19, Y+32	; 0x20
    24b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24bc:	28 17       	cp	r18, r24
    24be:	39 07       	cpc	r19, r25
    24c0:	11 f4       	brne	.+4      	; 0x24c6 <PASSWORD_setPassword+0x44>
			valid=FALSE;
    24c2:	19 a2       	std	Y+33, r1	; 0x21
    24c4:	7e c0       	rjmp	.+252    	; 0x25c2 <PASSWORD_setPassword+0x140>

		else
		{
			LCD_clearScreen();
    24c6:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <LCD_clearScreen>
			LCD_moveCursor(0, 0);
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	60 e0       	ldi	r22, 0x00	; 0
    24ce:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_moveCursor>
			LCD_displayString("NOT MATCHED PASS");
    24d2:	85 ed       	ldi	r24, 0xD5	; 213
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_displayString>
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	aa ef       	ldi	r26, 0xFA	; 250
    24e0:	b4 e4       	ldi	r27, 0x44	; 68
    24e2:	89 8f       	std	Y+25, r24	; 0x19
    24e4:	9a 8f       	std	Y+26, r25	; 0x1a
    24e6:	ab 8f       	std	Y+27, r26	; 0x1b
    24e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ea:	69 8d       	ldd	r22, Y+25	; 0x19
    24ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	4a e7       	ldi	r20, 0x7A	; 122
    24f8:	53 e4       	ldi	r21, 0x43	; 67
    24fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	8d 8b       	std	Y+21, r24	; 0x15
    2504:	9e 8b       	std	Y+22, r25	; 0x16
    2506:	af 8b       	std	Y+23, r26	; 0x17
    2508:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    250a:	6d 89       	ldd	r22, Y+21	; 0x15
    250c:	7e 89       	ldd	r23, Y+22	; 0x16
    250e:	8f 89       	ldd	r24, Y+23	; 0x17
    2510:	98 8d       	ldd	r25, Y+24	; 0x18
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	40 e8       	ldi	r20, 0x80	; 128
    2518:	5f e3       	ldi	r21, 0x3F	; 63
    251a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    251e:	88 23       	and	r24, r24
    2520:	2c f4       	brge	.+10     	; 0x252c <PASSWORD_setPassword+0xaa>
		__ticks = 1;
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	9c 8b       	std	Y+20, r25	; 0x14
    2528:	8b 8b       	std	Y+19, r24	; 0x13
    252a:	3f c0       	rjmp	.+126    	; 0x25aa <PASSWORD_setPassword+0x128>
	else if (__tmp > 65535)
    252c:	6d 89       	ldd	r22, Y+21	; 0x15
    252e:	7e 89       	ldd	r23, Y+22	; 0x16
    2530:	8f 89       	ldd	r24, Y+23	; 0x17
    2532:	98 8d       	ldd	r25, Y+24	; 0x18
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	3f ef       	ldi	r19, 0xFF	; 255
    2538:	4f e7       	ldi	r20, 0x7F	; 127
    253a:	57 e4       	ldi	r21, 0x47	; 71
    253c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2540:	18 16       	cp	r1, r24
    2542:	4c f5       	brge	.+82     	; 0x2596 <PASSWORD_setPassword+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2544:	69 8d       	ldd	r22, Y+25	; 0x19
    2546:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2548:	8b 8d       	ldd	r24, Y+27	; 0x1b
    254a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	40 e2       	ldi	r20, 0x20	; 32
    2552:	51 e4       	ldi	r21, 0x41	; 65
    2554:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	bc 01       	movw	r22, r24
    255e:	cd 01       	movw	r24, r26
    2560:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	9c 8b       	std	Y+20, r25	; 0x14
    256a:	8b 8b       	std	Y+19, r24	; 0x13
    256c:	0f c0       	rjmp	.+30     	; 0x258c <PASSWORD_setPassword+0x10a>
    256e:	89 e1       	ldi	r24, 0x19	; 25
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	9a 8b       	std	Y+18, r25	; 0x12
    2574:	89 8b       	std	Y+17, r24	; 0x11
    2576:	89 89       	ldd	r24, Y+17	; 0x11
    2578:	9a 89       	ldd	r25, Y+18	; 0x12
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	f1 f7       	brne	.-4      	; 0x257a <PASSWORD_setPassword+0xf8>
    257e:	9a 8b       	std	Y+18, r25	; 0x12
    2580:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2582:	8b 89       	ldd	r24, Y+19	; 0x13
    2584:	9c 89       	ldd	r25, Y+20	; 0x14
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	9c 8b       	std	Y+20, r25	; 0x14
    258a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    258c:	8b 89       	ldd	r24, Y+19	; 0x13
    258e:	9c 89       	ldd	r25, Y+20	; 0x14
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	69 f7       	brne	.-38     	; 0x256e <PASSWORD_setPassword+0xec>
    2594:	14 c0       	rjmp	.+40     	; 0x25be <PASSWORD_setPassword+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2596:	6d 89       	ldd	r22, Y+21	; 0x15
    2598:	7e 89       	ldd	r23, Y+22	; 0x16
    259a:	8f 89       	ldd	r24, Y+23	; 0x17
    259c:	98 8d       	ldd	r25, Y+24	; 0x18
    259e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	9c 8b       	std	Y+20, r25	; 0x14
    25a8:	8b 8b       	std	Y+19, r24	; 0x13
    25aa:	8b 89       	ldd	r24, Y+19	; 0x13
    25ac:	9c 89       	ldd	r25, Y+20	; 0x14
    25ae:	98 8b       	std	Y+16, r25	; 0x10
    25b0:	8f 87       	std	Y+15, r24	; 0x0f
    25b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    25b4:	98 89       	ldd	r25, Y+16	; 0x10
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <PASSWORD_setPassword+0x134>
    25ba:	98 8b       	std	Y+16, r25	; 0x10
    25bc:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2000);
			valid = TRUE;
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	89 a3       	std	Y+33, r24	; 0x21
void  PASSWORD_setPassword()
{
	uint8 valid=TRUE;
	uint16 pass1=0, pass2=0 ;

	while(valid)
    25c2:	89 a1       	ldd	r24, Y+33	; 0x21
    25c4:	88 23       	and	r24, r24
    25c6:	09 f0       	breq	.+2      	; 0x25ca <PASSWORD_setPassword+0x148>
    25c8:	6d cf       	rjmp	.-294    	; 0x24a4 <PASSWORD_setPassword+0x22>
			LCD_displayString("NOT MATCHED PASS");
			_delay_ms(2000);
			valid = TRUE;
		}
	}
	UART_sendByte((uint8)(pass1));
    25ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25cc:	0e 94 06 14 	call	0x280c	; 0x280c <UART_sendByte>
	UART_sendByte((uint8)(pass1>>8));
    25d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25d2:	98 a1       	ldd	r25, Y+32	; 0x20
    25d4:	89 2f       	mov	r24, r25
    25d6:	99 27       	eor	r25, r25
    25d8:	0e 94 06 14 	call	0x280c	; 0x280c <UART_sendByte>

	LCD_clearScreen();
    25dc:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	60 e0       	ldi	r22, 0x00	; 0
    25e4:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_moveCursor>
	LCD_displayString("SUCCESSFULL..!");
    25e8:	86 ee       	ldi	r24, 0xE6	; 230
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_displayString>
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	aa ef       	ldi	r26, 0xFA	; 250
    25f6:	b4 e4       	ldi	r27, 0x44	; 68
    25f8:	8b 87       	std	Y+11, r24	; 0x0b
    25fa:	9c 87       	std	Y+12, r25	; 0x0c
    25fc:	ad 87       	std	Y+13, r26	; 0x0d
    25fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2600:	6b 85       	ldd	r22, Y+11	; 0x0b
    2602:	7c 85       	ldd	r23, Y+12	; 0x0c
    2604:	8d 85       	ldd	r24, Y+13	; 0x0d
    2606:	9e 85       	ldd	r25, Y+14	; 0x0e
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	4a e7       	ldi	r20, 0x7A	; 122
    260e:	53 e4       	ldi	r21, 0x43	; 67
    2610:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	8f 83       	std	Y+7, r24	; 0x07
    261a:	98 87       	std	Y+8, r25	; 0x08
    261c:	a9 87       	std	Y+9, r26	; 0x09
    261e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2620:	6f 81       	ldd	r22, Y+7	; 0x07
    2622:	78 85       	ldd	r23, Y+8	; 0x08
    2624:	89 85       	ldd	r24, Y+9	; 0x09
    2626:	9a 85       	ldd	r25, Y+10	; 0x0a
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	40 e8       	ldi	r20, 0x80	; 128
    262e:	5f e3       	ldi	r21, 0x3F	; 63
    2630:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2634:	88 23       	and	r24, r24
    2636:	2c f4       	brge	.+10     	; 0x2642 <PASSWORD_setPassword+0x1c0>
		__ticks = 1;
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	9e 83       	std	Y+6, r25	; 0x06
    263e:	8d 83       	std	Y+5, r24	; 0x05
    2640:	3f c0       	rjmp	.+126    	; 0x26c0 <PASSWORD_setPassword+0x23e>
	else if (__tmp > 65535)
    2642:	6f 81       	ldd	r22, Y+7	; 0x07
    2644:	78 85       	ldd	r23, Y+8	; 0x08
    2646:	89 85       	ldd	r24, Y+9	; 0x09
    2648:	9a 85       	ldd	r25, Y+10	; 0x0a
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	3f ef       	ldi	r19, 0xFF	; 255
    264e:	4f e7       	ldi	r20, 0x7F	; 127
    2650:	57 e4       	ldi	r21, 0x47	; 71
    2652:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2656:	18 16       	cp	r1, r24
    2658:	4c f5       	brge	.+82     	; 0x26ac <PASSWORD_setPassword+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    265a:	6b 85       	ldd	r22, Y+11	; 0x0b
    265c:	7c 85       	ldd	r23, Y+12	; 0x0c
    265e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2660:	9e 85       	ldd	r25, Y+14	; 0x0e
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	40 e2       	ldi	r20, 0x20	; 32
    2668:	51 e4       	ldi	r21, 0x41	; 65
    266a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	bc 01       	movw	r22, r24
    2674:	cd 01       	movw	r24, r26
    2676:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	9e 83       	std	Y+6, r25	; 0x06
    2680:	8d 83       	std	Y+5, r24	; 0x05
    2682:	0f c0       	rjmp	.+30     	; 0x26a2 <PASSWORD_setPassword+0x220>
    2684:	89 e1       	ldi	r24, 0x19	; 25
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	9c 83       	std	Y+4, r25	; 0x04
    268a:	8b 83       	std	Y+3, r24	; 0x03
    268c:	8b 81       	ldd	r24, Y+3	; 0x03
    268e:	9c 81       	ldd	r25, Y+4	; 0x04
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	f1 f7       	brne	.-4      	; 0x2690 <PASSWORD_setPassword+0x20e>
    2694:	9c 83       	std	Y+4, r25	; 0x04
    2696:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2698:	8d 81       	ldd	r24, Y+5	; 0x05
    269a:	9e 81       	ldd	r25, Y+6	; 0x06
    269c:	01 97       	sbiw	r24, 0x01	; 1
    269e:	9e 83       	std	Y+6, r25	; 0x06
    26a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a2:	8d 81       	ldd	r24, Y+5	; 0x05
    26a4:	9e 81       	ldd	r25, Y+6	; 0x06
    26a6:	00 97       	sbiw	r24, 0x00	; 0
    26a8:	69 f7       	brne	.-38     	; 0x2684 <PASSWORD_setPassword+0x202>
    26aa:	14 c0       	rjmp	.+40     	; 0x26d4 <PASSWORD_setPassword+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ac:	6f 81       	ldd	r22, Y+7	; 0x07
    26ae:	78 85       	ldd	r23, Y+8	; 0x08
    26b0:	89 85       	ldd	r24, Y+9	; 0x09
    26b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	9e 83       	std	Y+6, r25	; 0x06
    26be:	8d 83       	std	Y+5, r24	; 0x05
    26c0:	8d 81       	ldd	r24, Y+5	; 0x05
    26c2:	9e 81       	ldd	r25, Y+6	; 0x06
    26c4:	9a 83       	std	Y+2, r25	; 0x02
    26c6:	89 83       	std	Y+1, r24	; 0x01
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	9a 81       	ldd	r25, Y+2	; 0x02
    26cc:	01 97       	sbiw	r24, 0x01	; 1
    26ce:	f1 f7       	brne	.-4      	; 0x26cc <PASSWORD_setPassword+0x24a>
    26d0:	9a 83       	std	Y+2, r25	; 0x02
    26d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
}
    26d4:	a1 96       	adiw	r28, 0x21	; 33
    26d6:	0f b6       	in	r0, 0x3f	; 63
    26d8:	f8 94       	cli
    26da:	de bf       	out	0x3e, r29	; 62
    26dc:	0f be       	out	0x3f, r0	; 63
    26de:	cd bf       	out	0x3d, r28	; 61
    26e0:	cf 91       	pop	r28
    26e2:	df 91       	pop	r29
    26e4:	08 95       	ret

000026e6 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_config* config)
{
    26e6:	df 93       	push	r29
    26e8:	cf 93       	push	r28
    26ea:	00 d0       	rcall	.+0      	; 0x26ec <UART_init+0x6>
    26ec:	00 d0       	rcall	.+0      	; 0x26ee <UART_init+0x8>
    26ee:	cd b7       	in	r28, 0x3d	; 61
    26f0:	de b7       	in	r29, 0x3e	; 62
    26f2:	9c 83       	std	Y+4, r25	; 0x04
    26f4:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    26f6:	1a 82       	std	Y+2, r1	; 0x02
    26f8:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    26fa:	eb e2       	ldi	r30, 0x2B	; 43
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	82 e0       	ldi	r24, 0x02	; 2
    2700:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2702:	ea e2       	ldi	r30, 0x2A	; 42
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	88 e1       	ldi	r24, 0x18	; 24
    2708:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC =0;
    270a:	e0 e4       	ldi	r30, 0x40	; 64
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	10 82       	st	Z, r1
	UCSRC |= (1<<URSEL);
    2710:	a0 e4       	ldi	r26, 0x40	; 64
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	e0 e4       	ldi	r30, 0x40	; 64
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	80 68       	ori	r24, 0x80	; 128
    271c:	8c 93       	st	X, r24
	UCSRC = (UCSRC&0xcf)|((config->PARITY_MOOD)<<4); // setting Parity
    271e:	a0 e4       	ldi	r26, 0x40	; 64
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	e0 e4       	ldi	r30, 0x40	; 64
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	28 2f       	mov	r18, r24
    272a:	2f 7c       	andi	r18, 0xCF	; 207
    272c:	eb 81       	ldd	r30, Y+3	; 0x03
    272e:	fc 81       	ldd	r31, Y+4	; 0x04
    2730:	81 81       	ldd	r24, Z+1	; 0x01
    2732:	88 2f       	mov	r24, r24
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	82 95       	swap	r24
    2738:	92 95       	swap	r25
    273a:	90 7f       	andi	r25, 0xF0	; 240
    273c:	98 27       	eor	r25, r24
    273e:	80 7f       	andi	r24, 0xF0	; 240
    2740:	98 27       	eor	r25, r24
    2742:	82 2b       	or	r24, r18
    2744:	8c 93       	st	X, r24
	UCSRC = (UCSRC&0xf7)|((config->STOP_MOOD)<<3);//setting stop bit
    2746:	a0 e4       	ldi	r26, 0x40	; 64
    2748:	b0 e0       	ldi	r27, 0x00	; 0
    274a:	e0 e4       	ldi	r30, 0x40	; 64
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	80 81       	ld	r24, Z
    2750:	28 2f       	mov	r18, r24
    2752:	27 7f       	andi	r18, 0xF7	; 247
    2754:	eb 81       	ldd	r30, Y+3	; 0x03
    2756:	fc 81       	ldd	r31, Y+4	; 0x04
    2758:	82 81       	ldd	r24, Z+2	; 0x02
    275a:	88 2f       	mov	r24, r24
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	88 0f       	add	r24, r24
    2760:	99 1f       	adc	r25, r25
    2762:	88 0f       	add	r24, r24
    2764:	99 1f       	adc	r25, r25
    2766:	88 0f       	add	r24, r24
    2768:	99 1f       	adc	r25, r25
    276a:	82 2b       	or	r24, r18
    276c:	8c 93       	st	X, r24
	UCSRC = (UCSRC&0xf6)|((config->DATA_MOOD)<<1);//seting data mood
    276e:	a0 e4       	ldi	r26, 0x40	; 64
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	e0 e4       	ldi	r30, 0x40	; 64
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	28 2f       	mov	r18, r24
    277a:	26 7f       	andi	r18, 0xF6	; 246
    277c:	eb 81       	ldd	r30, Y+3	; 0x03
    277e:	fc 81       	ldd	r31, Y+4	; 0x04
    2780:	80 81       	ld	r24, Z
    2782:	88 2f       	mov	r24, r24
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	88 0f       	add	r24, r24
    2788:	99 1f       	adc	r25, r25
    278a:	82 2b       	or	r24, r18
    278c:	8c 93       	st	X, r24
	if(config->DATA_MOOD == BIT_9)
    278e:	eb 81       	ldd	r30, Y+3	; 0x03
    2790:	fc 81       	ldd	r31, Y+4	; 0x04
    2792:	80 81       	ld	r24, Z
    2794:	84 30       	cpi	r24, 0x04	; 4
    2796:	39 f4       	brne	.+14     	; 0x27a6 <UART_init+0xc0>
	{
		UCSRB |=0x7; // setting enable for the 8 bit
    2798:	aa e2       	ldi	r26, 0x2A	; 42
    279a:	b0 e0       	ldi	r27, 0x00	; 0
    279c:	ea e2       	ldi	r30, 0x2A	; 42
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	80 81       	ld	r24, Z
    27a2:	87 60       	ori	r24, 0x07	; 7
    27a4:	8c 93       	st	X, r24
	}

	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (config->BAULD * 8UL))) - 1);
    27a6:	eb 81       	ldd	r30, Y+3	; 0x03
    27a8:	fc 81       	ldd	r31, Y+4	; 0x04
    27aa:	83 81       	ldd	r24, Z+3	; 0x03
    27ac:	94 81       	ldd	r25, Z+4	; 0x04
    27ae:	a5 81       	ldd	r26, Z+5	; 0x05
    27b0:	b6 81       	ldd	r27, Z+6	; 0x06
    27b2:	88 0f       	add	r24, r24
    27b4:	99 1f       	adc	r25, r25
    27b6:	aa 1f       	adc	r26, r26
    27b8:	bb 1f       	adc	r27, r27
    27ba:	88 0f       	add	r24, r24
    27bc:	99 1f       	adc	r25, r25
    27be:	aa 1f       	adc	r26, r26
    27c0:	bb 1f       	adc	r27, r27
    27c2:	88 0f       	add	r24, r24
    27c4:	99 1f       	adc	r25, r25
    27c6:	aa 1f       	adc	r26, r26
    27c8:	bb 1f       	adc	r27, r27
    27ca:	9c 01       	movw	r18, r24
    27cc:	ad 01       	movw	r20, r26
    27ce:	80 e4       	ldi	r24, 0x40	; 64
    27d0:	92 e4       	ldi	r25, 0x42	; 66
    27d2:	af e0       	ldi	r26, 0x0F	; 15
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	bc 01       	movw	r22, r24
    27d8:	cd 01       	movw	r24, r26
    27da:	0e 94 98 14 	call	0x2930	; 0x2930 <__udivmodsi4>
    27de:	da 01       	movw	r26, r20
    27e0:	c9 01       	movw	r24, r18
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	9a 83       	std	Y+2, r25	; 0x02
    27e6:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    27e8:	e0 e4       	ldi	r30, 0x40	; 64
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	89 81       	ldd	r24, Y+1	; 0x01
    27ee:	9a 81       	ldd	r25, Y+2	; 0x02
    27f0:	89 2f       	mov	r24, r25
    27f2:	99 27       	eor	r25, r25
    27f4:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    27f6:	e9 e2       	ldi	r30, 0x29	; 41
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
    27fc:	80 83       	st	Z, r24
}
    27fe:	0f 90       	pop	r0
    2800:	0f 90       	pop	r0
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	cf 91       	pop	r28
    2808:	df 91       	pop	r29
    280a:	08 95       	ret

0000280c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    280c:	df 93       	push	r29
    280e:	cf 93       	push	r28
    2810:	0f 92       	push	r0
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
    2816:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2818:	eb e2       	ldi	r30, 0x2B	; 43
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	80 81       	ld	r24, Z
    281e:	88 2f       	mov	r24, r24
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	80 72       	andi	r24, 0x20	; 32
    2824:	90 70       	andi	r25, 0x00	; 0
    2826:	00 97       	sbiw	r24, 0x00	; 0
    2828:	b9 f3       	breq	.-18     	; 0x2818 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    282a:	ec e2       	ldi	r30, 0x2C	; 44
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2832:	0f 90       	pop	r0
    2834:	cf 91       	pop	r28
    2836:	df 91       	pop	r29
    2838:	08 95       	ret

0000283a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    283a:	df 93       	push	r29
    283c:	cf 93       	push	r28
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2842:	eb e2       	ldi	r30, 0x2B	; 43
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	80 81       	ld	r24, Z
    2848:	88 23       	and	r24, r24
    284a:	dc f7       	brge	.-10     	; 0x2842 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    284c:	ec e2       	ldi	r30, 0x2C	; 44
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	80 81       	ld	r24, Z
}
    2852:	cf 91       	pop	r28
    2854:	df 91       	pop	r29
    2856:	08 95       	ret

00002858 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2858:	df 93       	push	r29
    285a:	cf 93       	push	r28
    285c:	00 d0       	rcall	.+0      	; 0x285e <UART_sendString+0x6>
    285e:	0f 92       	push	r0
    2860:	cd b7       	in	r28, 0x3d	; 61
    2862:	de b7       	in	r29, 0x3e	; 62
    2864:	9b 83       	std	Y+3, r25	; 0x03
    2866:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2868:	19 82       	std	Y+1, r1	; 0x01
    286a:	0e c0       	rjmp	.+28     	; 0x2888 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    286c:	89 81       	ldd	r24, Y+1	; 0x01
    286e:	28 2f       	mov	r18, r24
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	8a 81       	ldd	r24, Y+2	; 0x02
    2874:	9b 81       	ldd	r25, Y+3	; 0x03
    2876:	fc 01       	movw	r30, r24
    2878:	e2 0f       	add	r30, r18
    287a:	f3 1f       	adc	r31, r19
    287c:	80 81       	ld	r24, Z
    287e:	0e 94 06 14 	call	0x280c	; 0x280c <UART_sendByte>
		i++;
    2882:	89 81       	ldd	r24, Y+1	; 0x01
    2884:	8f 5f       	subi	r24, 0xFF	; 255
    2886:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2888:	89 81       	ldd	r24, Y+1	; 0x01
    288a:	28 2f       	mov	r18, r24
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	8a 81       	ldd	r24, Y+2	; 0x02
    2890:	9b 81       	ldd	r25, Y+3	; 0x03
    2892:	fc 01       	movw	r30, r24
    2894:	e2 0f       	add	r30, r18
    2896:	f3 1f       	adc	r31, r19
    2898:	80 81       	ld	r24, Z
    289a:	88 23       	and	r24, r24
    289c:	39 f7       	brne	.-50     	; 0x286c <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    289e:	0f 90       	pop	r0
    28a0:	0f 90       	pop	r0
    28a2:	0f 90       	pop	r0
    28a4:	cf 91       	pop	r28
    28a6:	df 91       	pop	r29
    28a8:	08 95       	ret

000028aa <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    28aa:	0f 93       	push	r16
    28ac:	1f 93       	push	r17
    28ae:	df 93       	push	r29
    28b0:	cf 93       	push	r28
    28b2:	00 d0       	rcall	.+0      	; 0x28b4 <UART_receiveString+0xa>
    28b4:	0f 92       	push	r0
    28b6:	cd b7       	in	r28, 0x3d	; 61
    28b8:	de b7       	in	r29, 0x3e	; 62
    28ba:	9b 83       	std	Y+3, r25	; 0x03
    28bc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    28be:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	28 2f       	mov	r18, r24
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	8a 81       	ldd	r24, Y+2	; 0x02
    28c8:	9b 81       	ldd	r25, Y+3	; 0x03
    28ca:	8c 01       	movw	r16, r24
    28cc:	02 0f       	add	r16, r18
    28ce:	13 1f       	adc	r17, r19
    28d0:	0e 94 1d 14 	call	0x283a	; 0x283a <UART_recieveByte>
    28d4:	f8 01       	movw	r30, r16
    28d6:	80 83       	st	Z, r24
    28d8:	0f c0       	rjmp	.+30     	; 0x28f8 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    28da:	89 81       	ldd	r24, Y+1	; 0x01
    28dc:	8f 5f       	subi	r24, 0xFF	; 255
    28de:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    28e0:	89 81       	ldd	r24, Y+1	; 0x01
    28e2:	28 2f       	mov	r18, r24
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	8a 81       	ldd	r24, Y+2	; 0x02
    28e8:	9b 81       	ldd	r25, Y+3	; 0x03
    28ea:	8c 01       	movw	r16, r24
    28ec:	02 0f       	add	r16, r18
    28ee:	13 1f       	adc	r17, r19
    28f0:	0e 94 1d 14 	call	0x283a	; 0x283a <UART_recieveByte>
    28f4:	f8 01       	movw	r30, r16
    28f6:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    28f8:	89 81       	ldd	r24, Y+1	; 0x01
    28fa:	28 2f       	mov	r18, r24
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2900:	9b 81       	ldd	r25, Y+3	; 0x03
    2902:	fc 01       	movw	r30, r24
    2904:	e2 0f       	add	r30, r18
    2906:	f3 1f       	adc	r31, r19
    2908:	80 81       	ld	r24, Z
    290a:	83 32       	cpi	r24, 0x23	; 35
    290c:	31 f7       	brne	.-52     	; 0x28da <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	28 2f       	mov	r18, r24
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	8a 81       	ldd	r24, Y+2	; 0x02
    2916:	9b 81       	ldd	r25, Y+3	; 0x03
    2918:	fc 01       	movw	r30, r24
    291a:	e2 0f       	add	r30, r18
    291c:	f3 1f       	adc	r31, r19
    291e:	10 82       	st	Z, r1
}
    2920:	0f 90       	pop	r0
    2922:	0f 90       	pop	r0
    2924:	0f 90       	pop	r0
    2926:	cf 91       	pop	r28
    2928:	df 91       	pop	r29
    292a:	1f 91       	pop	r17
    292c:	0f 91       	pop	r16
    292e:	08 95       	ret

00002930 <__udivmodsi4>:
    2930:	a1 e2       	ldi	r26, 0x21	; 33
    2932:	1a 2e       	mov	r1, r26
    2934:	aa 1b       	sub	r26, r26
    2936:	bb 1b       	sub	r27, r27
    2938:	fd 01       	movw	r30, r26
    293a:	0d c0       	rjmp	.+26     	; 0x2956 <__udivmodsi4_ep>

0000293c <__udivmodsi4_loop>:
    293c:	aa 1f       	adc	r26, r26
    293e:	bb 1f       	adc	r27, r27
    2940:	ee 1f       	adc	r30, r30
    2942:	ff 1f       	adc	r31, r31
    2944:	a2 17       	cp	r26, r18
    2946:	b3 07       	cpc	r27, r19
    2948:	e4 07       	cpc	r30, r20
    294a:	f5 07       	cpc	r31, r21
    294c:	20 f0       	brcs	.+8      	; 0x2956 <__udivmodsi4_ep>
    294e:	a2 1b       	sub	r26, r18
    2950:	b3 0b       	sbc	r27, r19
    2952:	e4 0b       	sbc	r30, r20
    2954:	f5 0b       	sbc	r31, r21

00002956 <__udivmodsi4_ep>:
    2956:	66 1f       	adc	r22, r22
    2958:	77 1f       	adc	r23, r23
    295a:	88 1f       	adc	r24, r24
    295c:	99 1f       	adc	r25, r25
    295e:	1a 94       	dec	r1
    2960:	69 f7       	brne	.-38     	; 0x293c <__udivmodsi4_loop>
    2962:	60 95       	com	r22
    2964:	70 95       	com	r23
    2966:	80 95       	com	r24
    2968:	90 95       	com	r25
    296a:	9b 01       	movw	r18, r22
    296c:	ac 01       	movw	r20, r24
    296e:	bd 01       	movw	r22, r26
    2970:	cf 01       	movw	r24, r30
    2972:	08 95       	ret

00002974 <__prologue_saves__>:
    2974:	2f 92       	push	r2
    2976:	3f 92       	push	r3
    2978:	4f 92       	push	r4
    297a:	5f 92       	push	r5
    297c:	6f 92       	push	r6
    297e:	7f 92       	push	r7
    2980:	8f 92       	push	r8
    2982:	9f 92       	push	r9
    2984:	af 92       	push	r10
    2986:	bf 92       	push	r11
    2988:	cf 92       	push	r12
    298a:	df 92       	push	r13
    298c:	ef 92       	push	r14
    298e:	ff 92       	push	r15
    2990:	0f 93       	push	r16
    2992:	1f 93       	push	r17
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
    299c:	ca 1b       	sub	r28, r26
    299e:	db 0b       	sbc	r29, r27
    29a0:	0f b6       	in	r0, 0x3f	; 63
    29a2:	f8 94       	cli
    29a4:	de bf       	out	0x3e, r29	; 62
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	cd bf       	out	0x3d, r28	; 61
    29aa:	09 94       	ijmp

000029ac <__epilogue_restores__>:
    29ac:	2a 88       	ldd	r2, Y+18	; 0x12
    29ae:	39 88       	ldd	r3, Y+17	; 0x11
    29b0:	48 88       	ldd	r4, Y+16	; 0x10
    29b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    29b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    29b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    29b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    29ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    29bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    29be:	b9 84       	ldd	r11, Y+9	; 0x09
    29c0:	c8 84       	ldd	r12, Y+8	; 0x08
    29c2:	df 80       	ldd	r13, Y+7	; 0x07
    29c4:	ee 80       	ldd	r14, Y+6	; 0x06
    29c6:	fd 80       	ldd	r15, Y+5	; 0x05
    29c8:	0c 81       	ldd	r16, Y+4	; 0x04
    29ca:	1b 81       	ldd	r17, Y+3	; 0x03
    29cc:	aa 81       	ldd	r26, Y+2	; 0x02
    29ce:	b9 81       	ldd	r27, Y+1	; 0x01
    29d0:	ce 0f       	add	r28, r30
    29d2:	d1 1d       	adc	r29, r1
    29d4:	0f b6       	in	r0, 0x3f	; 63
    29d6:	f8 94       	cli
    29d8:	de bf       	out	0x3e, r29	; 62
    29da:	0f be       	out	0x3f, r0	; 63
    29dc:	cd bf       	out	0x3d, r28	; 61
    29de:	ed 01       	movw	r28, r26
    29e0:	08 95       	ret

000029e2 <itoa>:
    29e2:	fb 01       	movw	r30, r22
    29e4:	9f 01       	movw	r18, r30
    29e6:	e8 94       	clt
    29e8:	42 30       	cpi	r20, 0x02	; 2
    29ea:	c4 f0       	brlt	.+48     	; 0x2a1c <itoa+0x3a>
    29ec:	45 32       	cpi	r20, 0x25	; 37
    29ee:	b4 f4       	brge	.+44     	; 0x2a1c <itoa+0x3a>
    29f0:	4a 30       	cpi	r20, 0x0A	; 10
    29f2:	29 f4       	brne	.+10     	; 0x29fe <itoa+0x1c>
    29f4:	97 fb       	bst	r25, 7
    29f6:	1e f4       	brtc	.+6      	; 0x29fe <itoa+0x1c>
    29f8:	90 95       	com	r25
    29fa:	81 95       	neg	r24
    29fc:	9f 4f       	sbci	r25, 0xFF	; 255
    29fe:	64 2f       	mov	r22, r20
    2a00:	77 27       	eor	r23, r23
    2a02:	0e 94 22 15 	call	0x2a44	; 0x2a44 <__udivmodhi4>
    2a06:	80 5d       	subi	r24, 0xD0	; 208
    2a08:	8a 33       	cpi	r24, 0x3A	; 58
    2a0a:	0c f0       	brlt	.+2      	; 0x2a0e <itoa+0x2c>
    2a0c:	89 5d       	subi	r24, 0xD9	; 217
    2a0e:	81 93       	st	Z+, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	00 97       	sbiw	r24, 0x00	; 0
    2a14:	a1 f7       	brne	.-24     	; 0x29fe <itoa+0x1c>
    2a16:	16 f4       	brtc	.+4      	; 0x2a1c <itoa+0x3a>
    2a18:	5d e2       	ldi	r21, 0x2D	; 45
    2a1a:	51 93       	st	Z+, r21
    2a1c:	10 82       	st	Z, r1
    2a1e:	c9 01       	movw	r24, r18
    2a20:	0c 94 12 15 	jmp	0x2a24	; 0x2a24 <strrev>

00002a24 <strrev>:
    2a24:	dc 01       	movw	r26, r24
    2a26:	fc 01       	movw	r30, r24
    2a28:	67 2f       	mov	r22, r23
    2a2a:	71 91       	ld	r23, Z+
    2a2c:	77 23       	and	r23, r23
    2a2e:	e1 f7       	brne	.-8      	; 0x2a28 <strrev+0x4>
    2a30:	32 97       	sbiw	r30, 0x02	; 2
    2a32:	04 c0       	rjmp	.+8      	; 0x2a3c <strrev+0x18>
    2a34:	7c 91       	ld	r23, X
    2a36:	6d 93       	st	X+, r22
    2a38:	70 83       	st	Z, r23
    2a3a:	62 91       	ld	r22, -Z
    2a3c:	ae 17       	cp	r26, r30
    2a3e:	bf 07       	cpc	r27, r31
    2a40:	c8 f3       	brcs	.-14     	; 0x2a34 <strrev+0x10>
    2a42:	08 95       	ret

00002a44 <__udivmodhi4>:
    2a44:	aa 1b       	sub	r26, r26
    2a46:	bb 1b       	sub	r27, r27
    2a48:	51 e1       	ldi	r21, 0x11	; 17
    2a4a:	07 c0       	rjmp	.+14     	; 0x2a5a <__udivmodhi4_ep>

00002a4c <__udivmodhi4_loop>:
    2a4c:	aa 1f       	adc	r26, r26
    2a4e:	bb 1f       	adc	r27, r27
    2a50:	a6 17       	cp	r26, r22
    2a52:	b7 07       	cpc	r27, r23
    2a54:	10 f0       	brcs	.+4      	; 0x2a5a <__udivmodhi4_ep>
    2a56:	a6 1b       	sub	r26, r22
    2a58:	b7 0b       	sbc	r27, r23

00002a5a <__udivmodhi4_ep>:
    2a5a:	88 1f       	adc	r24, r24
    2a5c:	99 1f       	adc	r25, r25
    2a5e:	5a 95       	dec	r21
    2a60:	a9 f7       	brne	.-22     	; 0x2a4c <__udivmodhi4_loop>
    2a62:	80 95       	com	r24
    2a64:	90 95       	com	r25
    2a66:	bc 01       	movw	r22, r24
    2a68:	cd 01       	movw	r24, r26
    2a6a:	08 95       	ret

00002a6c <_exit>:
    2a6c:	f8 94       	cli

00002a6e <__stop_program>:
    2a6e:	ff cf       	rjmp	.-2      	; 0x2a6e <__stop_program>
